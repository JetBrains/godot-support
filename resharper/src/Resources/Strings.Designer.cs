// <auto-generated/>
namespace JetBrains.ReSharper.Plugins.Godot.Resources
{
  using System;
  using JetBrains.Application.I18n;
  using JetBrains.DataFlow;
  using JetBrains.Diagnostics;
  using JetBrains.Lifetimes;
  using JetBrains.Util;
  using JetBrains.Util.Logging;
  using JetBrains.Application.I18n.Plurals;
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
  public static class Strings
  {
    private static readonly ILogger ourLog = Logger.GetLogger("JetBrains.ReSharper.Plugins.Godot.Resources.Strings");

    static Strings()
    {
      CultureContextComponent.Instance.Change.Advise(Lifetime.Eternal, args =>
      {
          var instance = args.HasNew ? args.New : null;
          if (instance != null)
          {
            ourResourceManager = new Lazy<JetResourceManager>(
              () =>
              {
                return instance
                  .CreateResourceManager("JetBrains.ReSharper.Plugins.Godot.Resources.Strings", typeof(Strings).Assembly);
              });
          }
          else
          {
            ourResourceManager = null;
          };
      });
    }
    
    private static Lazy<JetResourceManager> ourResourceManager = null;
    
    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
    public static JetResourceManager ResourceManager
    {
      get
      {
        var resourceManager = ourResourceManager;
        if (resourceManager == null)
        {
          return ErrorJetResourceManager.Instance;
        }
        return resourceManager.Value;
      }
    }

    public static string Choice(string format, params object[] args)
    {
        var formatter = ResourceManager.ChoiceFormatter;
        if (formatter == null) return "???";
        return string.Format(formatter, format, args);
    }

    public static string GDScript_AttemptToConnectTheRunningGodotEditor_Text => ResourceManager.GetString("GDScript_AttemptToConnectTheRunningGodotEditor_Text");
    public static string GDScript_AutomaticallyStartHeadlessLSPServer_Text => ResourceManager.GetString("GDScript_AutomaticallyStartHeadlessLSPServer_Text");
    public static string GDScript_ConnectingLSPServer_Text => ResourceManager.GetString("GDScript_ConnectingLSPServer_Text");
    public static string CSharp_Text => ResourceManager.GetString("CSharp_Text");
    public static string GDScriptSupport_Text => ResourceManager.GetString("GDScriptSupport_Text");
    public static string GodotPluginSettings_Text => ResourceManager.GetString("GodotPluginSettings_Text");
    public static string GodotSettings_t_Enable_debugger_extensions => ResourceManager.GetString("GodotSettings_t_Enable_debugger_extensions");
    public static string ExtendValueRendering_Text => ResourceManager.GetString("ExtendValueRendering_Text");
    public static string GodotOptionsPage_AddDebuggingSection_Extend_value_rendering_Comment => ResourceManager.GetString("GodotOptionsPage_AddDebuggingSection_Extend_value_rendering_Comment");
    public static string GDScript_LanguageServer_Text => ResourceManager.GetString("GDScript_LanguageServer_Text");
    public static string GDScript_NeverUseLSP_Text => ResourceManager.GetString("GDScript_NeverUseLSP_Text");
    public static string GDScript_UseARandomFreePortSupportedInGodot_Text => ResourceManager.GetString("GDScript_UseARandomFreePortSupportedInGodot_Text");
    public static string GDScript_LSP_Port_Text => ResourceManager.GetString("GDScript_LSP_Port_Text");
    public static string GDScript_LSP_Remote_Host_Text => ResourceManager.GetString("GDScript_LSP_Remote_Host_Text");
    public static string LanguageServerConnectionMode_Description => ResourceManager.GetString("LanguageServerConnectionMode_Description");
  }
}