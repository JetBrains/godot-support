// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Gd.flex

package gdscript;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import gdscript.psi.GdTokenType;
import gdscript.psi.GdTypes;
import java.util.Stack;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


class GdLexer implements FlexLexer {
 /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CREATE_INDENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\10\30\1\31\1\32\1\33\1\34\1\35\1\0"+
    "\1\36\6\37\24\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\0\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\40\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\40\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\40\1\75\1\76\1\77\1\100\6\0"+
    "\1\3\u01a2\0\2\3\326\0\u0100\101";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\2\22\1\23\1\24\1\25\1\26"+
    "\1\25\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\20\30\1\36\1\37\1\40\1\41\10\42\1\43\1\44"+
    "\1\25\1\0\1\11\2\0\1\6\1\0\1\45\1\0"+
    "\1\46\1\11\1\0\1\47\1\50\1\51\1\52\1\53"+
    "\1\22\3\0\1\54\1\55\1\56\1\0\1\30\1\57"+
    "\13\30\1\60\1\61\1\62\4\30\1\63\13\30\6\42"+
    "\2\0\1\11\1\0\1\6\1\64\1\0\2\11\1\22"+
    "\1\0\1\22\1\65\1\0\1\46\11\30\1\66\1\30"+
    "\1\67\1\70\2\30\1\71\1\4\6\30\1\72\4\30"+
    "\1\73\2\30\7\42\6\0\1\22\1\0\1\11\1\0"+
    "\5\30\1\74\1\75\1\76\2\30\1\77\2\30\1\100"+
    "\1\101\3\30\1\102\3\30\1\103\1\30\1\104\1\30"+
    "\5\42\2\0\1\11\2\0\1\65\1\105\1\106\1\107"+
    "\1\110\2\30\1\111\1\30\1\112\5\30\1\113\1\30"+
    "\1\114\2\42\1\0\4\30\1\115\1\116\1\30\1\117"+
    "\1\120\1\121\1\122\1\123\1\11\3\30\1\124\5\30"+
    "\1\125\10\30\1\126\1\127\1\130\1\131\1\132";

  private static int [] zzUnpackAction() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\204\0\u0108\0\u014a\0\u018c"+
    "\0\u01ce\0\u0210\0\u0252\0\u0294\0\204\0\204\0\u02d6\0\u0318"+
    "\0\204\0\u035a\0\u039c\0\u03de\0\u0420\0\u0462\0\u04a4\0\204"+
    "\0\u04e6\0\u0108\0\u0528\0\u056a\0\u05ac\0\204\0\204\0\204"+
    "\0\u05ee\0\u05ac\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a"+
    "\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\u098a"+
    "\0\u09cc\0\u0a0e\0\204\0\u0a50\0\204\0\204\0\u0a92\0\u0ad4"+
    "\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\204\0\204"+
    "\0\204\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68\0\u0daa\0\u0dec\0\204"+
    "\0\u0e2e\0\204\0\204\0\u0e70\0\u03de\0\204\0\204\0\204"+
    "\0\204\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\204\0\u03de\0\u03de"+
    "\0\u0fba\0\u0ffc\0\u05ac\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146"+
    "\0\u1188\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2\0\u05ac\0\u1314"+
    "\0\u05ac\0\u1356\0\u1398\0\u13da\0\u141c\0\u05ac\0\u145e\0\u14a0"+
    "\0\u14e2\0\u1524\0\u1566\0\u15a8\0\u15ea\0\u162c\0\u166e\0\u16b0"+
    "\0\u16f2\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0"+
    "\0\u1902\0\u0ca2\0\u1944\0\204\0\204\0\u1986\0\u19c8\0\u1a0a"+
    "\0\u0ef4\0\u1a4c\0\u0f78\0\204\0\u1a8e\0\u05ac\0\u1ad0\0\u1b12"+
    "\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u05ac"+
    "\0\u1d22\0\u05ac\0\u05ac\0\u1d64\0\u1da6\0\u05ac\0\u05ac\0\u1de8"+
    "\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u05ac\0\u1f74\0\u1fb6"+
    "\0\u1ff8\0\u203a\0\u207c\0\u20be\0\u2100\0\u2142\0\u2184\0\u21c6"+
    "\0\u2208\0\u224a\0\u228c\0\u22ce\0\u2310\0\u2352\0\u2394\0\u23d6"+
    "\0\u2418\0\u245a\0\u1a4c\0\u249c\0\u0fba\0\u24de\0\u2520\0\u2562"+
    "\0\u25a4\0\u25e6\0\u2628\0\u05ac\0\u05ac\0\u05ac\0\u266a\0\u26ac"+
    "\0\u05ac\0\u26ee\0\u2730\0\u05ac\0\u05ac\0\u2772\0\u27b4\0\u27f6"+
    "\0\u05ac\0\u2838\0\u287a\0\u28bc\0\u05ac\0\u28fe\0\u05ac\0\u2940"+
    "\0\u2982\0\u29c4\0\u2a06\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e\0\u2b50"+
    "\0\u2b92\0\u2bd4\0\u0ca2\0\u05ac\0\u2c16\0\u2c58\0\u05ac\0\u2c9a"+
    "\0\u2cdc\0\u05ac\0\u2d1e\0\u05ac\0\u2d60\0\u2da2\0\u2de4\0\u2e26"+
    "\0\u2e68\0\u05ac\0\u2eaa\0\u05ac\0\u2eec\0\u2f2e\0\u2f70\0\u2fb2"+
    "\0\u2ff4\0\u3036\0\u3078\0\u30ba\0\u05ac\0\u30fc\0\u313e\0\u05ac"+
    "\0\u05ac\0\u05ac\0\u05ac\0\u2acc\0\u3180\0\u31c2\0\u3204\0\u05ac"+
    "\0\u3246\0\u3288\0\u32ca\0\u330c\0\u334e\0\u05ac\0\u3390\0\u33d2"+
    "\0\u3414\0\u3456\0\u3498\0\u34da\0\u351c\0\u355e\0\u05ac\0\u05ac"+
    "\0\u05ac\0\u05ac\0\u05ac";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\2\3\1\5\1\4\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\2\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\2\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\35\1\46"+
    "\1\47\1\50\1\35\1\51\2\35\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\35\1\61\1\62\2\35"+
    "\1\63\1\64\1\65\1\66\1\3\1\67\1\70\1\5"+
    "\2\3\1\5\1\70\1\67\1\71\1\72\1\73\1\67"+
    "\1\74\1\75\26\67\1\76\34\67\1\3\103\0\1\4"+
    "\1\77\2\0\1\77\1\4\2\0\1\100\124\0\1\101"+
    "\45\0\2\102\1\0\2\102\1\0\2\102\1\103\31\102"+
    "\1\104\37\102\2\10\1\0\2\10\1\0\74\10\10\0"+
    "\1\105\2\0\1\106\11\0\4\106\6\0\2\106\4\0"+
    "\30\106\15\0\1\107\2\0\1\106\11\0\4\106\3\0"+
    "\1\110\2\0\2\106\4\0\30\106\15\0\1\111\3\0"+
    "\1\112\17\0\1\110\45\0\2\14\1\0\2\14\1\0"+
    "\7\14\1\113\24\14\1\114\37\14\20\0\1\115\13\0"+
    "\1\110\66\0\1\116\12\0\1\110\70\0\1\117\10\0"+
    "\1\110\1\120\70\0\1\121\1\0\3\122\105\0\1\110"+
    "\71\0\1\122\1\0\3\26\14\0\1\26\1\0\1\123"+
    "\2\0\1\124\20\0\1\125\32\0\1\122\1\0\3\26"+
    "\14\0\1\26\4\0\1\124\63\0\1\126\100\0\1\127"+
    "\1\101\101\0\1\101\1\130\72\0\3\34\6\0\2\34"+
    "\4\0\30\34\33\0\3\35\6\0\2\35\4\0\30\35"+
    "\1\0\1\35\13\0\1\131\23\0\1\110\73\0\3\35"+
    "\6\0\2\35\4\0\15\35\1\132\3\35\1\133\3\35"+
    "\1\134\2\35\1\0\1\35\31\0\3\35\6\0\2\35"+
    "\4\0\20\35\1\135\7\35\1\0\1\35\31\0\3\35"+
    "\6\0\2\35\4\0\13\35\1\136\2\35\1\137\11\35"+
    "\1\0\1\35\31\0\3\35\6\0\2\35\4\0\13\35"+
    "\1\140\1\35\1\141\10\35\1\142\1\35\1\0\1\35"+
    "\31\0\3\35\6\0\2\35\4\0\1\35\1\143\14\35"+
    "\1\144\4\35\1\145\4\35\1\0\1\35\31\0\3\35"+
    "\6\0\2\35\4\0\5\35\1\146\22\35\1\0\1\35"+
    "\31\0\3\35\6\0\2\35\4\0\6\35\1\147\6\35"+
    "\1\150\3\35\1\151\6\35\1\0\1\35\31\0\3\35"+
    "\6\0\2\35\4\0\1\35\1\152\26\35\1\0\1\35"+
    "\31\0\3\35\6\0\2\35\4\0\1\35\1\153\14\35"+
    "\1\154\4\35\1\155\4\35\1\0\1\35\31\0\3\35"+
    "\6\0\2\35\4\0\20\35\1\156\7\35\1\0\1\35"+
    "\31\0\3\35\6\0\2\35\4\0\1\35\1\157\21\35"+
    "\1\160\4\35\1\0\1\35\31\0\3\35\6\0\2\35"+
    "\4\0\5\35\1\161\22\35\1\0\1\35\31\0\3\35"+
    "\6\0\2\35\4\0\5\35\1\162\3\35\1\163\10\35"+
    "\1\164\1\165\4\35\1\0\1\35\31\0\3\35\6\0"+
    "\2\35\4\0\20\35\1\166\7\35\1\0\1\35\31\0"+
    "\3\35\6\0\2\35\4\0\1\35\1\167\14\35\1\170"+
    "\11\35\1\0\1\35\31\0\3\35\6\0\2\35\4\0"+
    "\10\35\1\171\17\35\1\0\1\35\31\0\3\35\3\0"+
    "\1\110\2\0\2\35\4\0\30\35\1\0\1\156\3\0"+
    "\2\67\4\0\73\67\1\0\1\67\1\70\1\77\2\0"+
    "\1\77\1\70\72\67\1\0\2\172\1\0\2\102\1\0"+
    "\2\172\1\173\31\172\1\174\36\172\1\102\2\72\1\0"+
    "\2\10\1\0\73\72\1\10\2\67\4\0\2\67\1\172"+
    "\70\67\1\0\2\67\4\0\2\67\1\175\70\67\1\0"+
    "\2\75\1\0\2\14\1\0\7\75\1\67\24\75\1\176"+
    "\36\75\1\14\2\67\4\0\2\67\1\177\70\67\1\0"+
    "\2\102\1\0\2\102\1\0\2\102\1\113\31\102\1\104"+
    "\37\102\10\0\1\200\71\0\1\102\1\201\2\102\1\201"+
    "\1\102\1\201\1\102\1\202\31\102\1\203\41\102\1\0"+
    "\2\102\1\0\1\105\1\102\1\204\2\102\1\105\10\102"+
    "\6\105\5\102\2\105\1\102\1\104\2\102\30\105\5\102"+
    "\13\0\1\106\11\0\4\106\6\0\2\106\4\0\30\106"+
    "\13\0\1\107\1\0\1\204\2\0\1\107\10\0\6\107"+
    "\5\0\2\107\4\0\30\107\5\0\2\111\1\0\2\111"+
    "\1\0\2\111\1\205\31\111\1\206\37\111\1\14\1\207"+
    "\2\14\1\207\1\14\1\207\33\14\1\210\37\14\26\0"+
    "\3\122\14\0\1\122\4\0\1\124\55\0\2\211\15\0"+
    "\1\211\57\0\1\212\104\0\3\213\6\0\1\213\5\0"+
    "\7\213\26\0\2\131\1\0\2\131\1\0\1\102\1\131"+
    "\1\214\31\131\1\215\37\131\26\0\3\35\6\0\2\35"+
    "\4\0\4\35\1\216\23\35\1\0\1\35\31\0\3\35"+
    "\6\0\2\35\4\0\1\35\1\217\26\35\1\0\1\35"+
    "\31\0\3\35\6\0\2\35\4\0\5\35\1\220\22\35"+
    "\1\0\1\35\31\0\3\35\6\0\2\35\4\0\1\35"+
    "\1\221\26\35\1\0\1\35\31\0\3\35\6\0\2\35"+
    "\4\0\15\35\1\222\12\35\1\0\1\35\31\0\3\35"+
    "\6\0\2\35\4\0\11\35\1\223\7\35\1\224\6\35"+
    "\1\0\1\35\31\0\3\35\6\0\2\35\4\0\23\35"+
    "\1\225\4\35\1\0\1\35\31\0\3\35\6\0\2\35"+
    "\4\0\22\35\1\226\5\35\1\0\1\35\31\0\3\35"+
    "\6\0\2\35\4\0\13\35\1\227\14\35\1\0\1\35"+
    "\31\0\3\35\6\0\2\35\4\0\20\35\1\230\7\35"+
    "\1\0\1\35\31\0\3\35\6\0\2\35\4\0\15\35"+
    "\1\231\12\35\1\0\1\35\31\0\3\35\6\0\2\35"+
    "\4\0\22\35\1\232\5\35\1\0\1\35\31\0\3\35"+
    "\6\0\2\35\4\0\6\35\1\233\21\35\1\0\1\35"+
    "\31\0\3\35\6\0\2\35\4\0\21\35\1\234\1\235"+
    "\5\35\1\0\1\35\31\0\3\35\6\0\2\35\4\0"+
    "\15\35\1\236\12\35\1\0\1\35\31\0\3\35\6\0"+
    "\2\35\4\0\22\35\1\237\5\35\1\0\1\35\31\0"+
    "\3\35\6\0\2\35\4\0\13\35\1\240\14\35\1\0"+
    "\1\35\31\0\3\35\6\0\2\35\4\0\21\35\1\241"+
    "\6\35\1\0\1\35\31\0\3\35\6\0\2\35\4\0"+
    "\17\35\1\242\10\35\1\0\1\35\31\0\3\35\6\0"+
    "\2\35\4\0\14\35\1\243\5\35\1\244\5\35\1\0"+
    "\1\35\31\0\3\35\6\0\2\35\4\0\13\35\1\245"+
    "\6\35\1\246\5\35\1\0\1\35\31\0\3\35\6\0"+
    "\2\35\4\0\7\35\1\247\20\35\1\0\1\35\31\0"+
    "\3\35\6\0\2\35\4\0\1\35\1\250\26\35\1\0"+
    "\1\35\31\0\3\35\6\0\2\35\4\0\17\35\1\251"+
    "\10\35\1\0\1\35\31\0\3\35\6\0\2\35\4\0"+
    "\23\35\1\252\4\35\1\0\1\35\31\0\3\35\6\0"+
    "\2\35\4\0\20\35\1\253\7\35\1\0\1\35\31\0"+
    "\3\35\6\0\2\35\4\0\11\35\1\254\16\35\1\0"+
    "\1\35\31\0\3\35\6\0\2\35\4\0\11\35\1\255"+
    "\16\35\1\0\1\35\3\0\2\172\1\0\2\102\1\0"+
    "\2\172\1\67\31\172\1\174\36\172\1\102\2\67\4\0"+
    "\2\67\1\256\70\67\1\0\1\172\1\257\2\102\1\201"+
    "\1\102\1\257\33\172\1\260\36\172\1\102\2\175\1\0"+
    "\2\111\1\0\2\175\1\67\31\175\1\261\36\175\1\111"+
    "\1\75\1\262\2\14\1\207\1\14\1\262\33\75\1\263"+
    "\36\75\1\14\2\177\1\0\2\131\1\0\1\172\1\177"+
    "\1\67\31\177\1\264\36\177\1\131\10\200\1\265\31\200"+
    "\1\266\37\200\1\102\1\201\2\102\1\201\1\102\1\201"+
    "\1\102\1\113\31\102\1\203\40\102\4\201\1\267\1\201"+
    "\1\102\1\202\31\102\1\203\37\102\2\111\4\0\73\111"+
    "\1\0\1\14\1\207\2\14\1\207\1\14\1\207\6\14"+
    "\1\113\24\14\1\270\41\14\1\271\2\207\1\272\7\14"+
    "\1\113\24\14\1\114\37\14\26\0\3\273\51\0\1\131"+
    "\1\274\2\102\1\201\1\102\1\274\1\131\1\275\31\131"+
    "\1\276\36\131\1\102\26\0\3\35\6\0\2\35\4\0"+
    "\11\35\1\277\16\35\1\0\1\35\31\0\3\35\6\0"+
    "\2\35\4\0\1\35\1\300\26\35\1\0\1\35\31\0"+
    "\3\35\6\0\2\35\4\0\21\35\1\301\6\35\1\0"+
    "\1\35\31\0\3\35\6\0\2\35\4\0\21\35\1\302"+
    "\1\303\5\35\1\0\1\35\31\0\3\35\6\0\2\35"+
    "\4\0\6\35\1\304\21\35\1\0\1\35\31\0\3\35"+
    "\6\0\2\35\4\0\5\35\1\305\22\35\1\0\1\35"+
    "\31\0\3\35\6\0\2\35\4\0\14\35\1\306\13\35"+
    "\1\0\1\35\31\0\3\35\6\0\2\35\4\0\5\35"+
    "\1\307\22\35\1\0\1\35\31\0\3\35\6\0\2\35"+
    "\4\0\21\35\1\310\6\35\1\0\1\35\31\0\3\35"+
    "\6\0\2\35\4\0\3\35\1\311\24\35\1\0\1\35"+
    "\31\0\3\35\6\0\2\35\4\0\22\35\1\312\5\35"+
    "\1\0\1\35\31\0\3\35\6\0\2\35\4\0\3\35"+
    "\1\313\24\35\1\0\1\35\31\0\3\35\6\0\2\35"+
    "\4\0\13\35\1\314\14\35\1\0\1\35\31\0\3\35"+
    "\6\0\2\35\4\0\21\35\1\315\6\35\1\0\1\35"+
    "\31\0\3\35\6\0\2\35\4\0\17\35\1\316\10\35"+
    "\1\0\1\35\31\0\3\35\6\0\2\35\4\0\16\35"+
    "\1\317\11\35\1\0\1\35\31\0\3\35\6\0\2\35"+
    "\4\0\23\35\1\320\4\35\1\0\1\35\31\0\3\35"+
    "\6\0\2\35\4\0\6\35\1\321\21\35\1\0\1\35"+
    "\31\0\3\35\6\0\2\35\4\0\15\35\1\322\12\35"+
    "\1\0\1\35\31\0\3\35\6\0\2\35\4\0\22\35"+
    "\1\323\5\35\1\0\1\35\31\0\3\35\6\0\2\35"+
    "\4\0\5\35\1\324\22\35\1\0\1\35\31\0\3\35"+
    "\6\0\2\35\4\0\5\35\1\325\22\35\1\0\1\35"+
    "\31\0\3\35\6\0\2\35\4\0\1\35\1\326\26\35"+
    "\1\0\1\35\31\0\3\35\6\0\2\35\4\0\4\35"+
    "\1\327\23\35\1\0\1\35\31\0\3\35\6\0\2\35"+
    "\4\0\13\35\1\330\14\35\1\0\1\35\3\0\2\256"+
    "\4\200\2\256\1\331\31\256\1\332\36\256\1\200\1\172"+
    "\1\257\2\102\1\201\1\102\1\257\1\172\1\67\31\172"+
    "\1\260\36\172\1\102\1\172\1\257\3\201\1\267\1\257"+
    "\33\172\1\260\36\172\1\102\2\175\4\0\73\175\1\0"+
    "\1\75\1\262\2\14\1\207\1\14\1\262\6\75\1\67"+
    "\24\75\1\333\36\75\1\14\2\75\1\271\2\207\1\272"+
    "\7\75\1\67\24\75\1\176\36\75\1\14\1\177\1\334"+
    "\2\102\1\201\1\102\1\334\33\177\1\335\36\177\1\102"+
    "\10\200\1\336\1\200\1\0\27\200\1\0\47\200\1\337"+
    "\31\200\1\266\37\200\1\102\2\201\1\102\1\201\1\102"+
    "\1\201\1\102\1\113\31\102\1\203\37\102\1\14\4\207"+
    "\1\340\1\207\33\14\1\210\37\14\1\0\1\271\1\14"+
    "\1\0\1\271\1\14\1\271\33\0\1\341\40\0\1\271"+
    "\1\207\1\0\1\271\1\14\1\271\33\0\1\341\37\0"+
    "\1\131\1\274\1\102\1\131\1\274\1\102\1\201\1\131"+
    "\1\214\31\131\1\342\40\131\1\274\1\201\2\274\1\267"+
    "\1\201\1\131\1\343\31\131\1\342\37\131\26\0\3\35"+
    "\6\0\2\35\4\0\22\35\1\344\5\35\1\0\1\35"+
    "\31\0\3\35\6\0\2\35\4\0\12\35\1\345\15\35"+
    "\1\0\1\35\31\0\3\35\6\0\2\35\4\0\21\35"+
    "\1\346\6\35\1\0\1\35\31\0\3\35\6\0\2\35"+
    "\4\0\22\35\1\347\5\35\1\0\1\35\31\0\3\35"+
    "\6\0\2\35\4\0\11\35\1\350\16\35\1\0\1\35"+
    "\31\0\3\35\6\0\2\35\4\0\15\35\1\351\12\35"+
    "\1\0\1\35\31\0\3\35\6\0\2\35\4\0\5\35"+
    "\1\352\22\35\1\0\1\35\31\0\3\35\6\0\2\35"+
    "\4\0\5\35\1\353\22\35\1\0\1\35\31\0\3\35"+
    "\6\0\2\35\4\0\10\35\1\354\17\35\1\0\1\35"+
    "\31\0\3\35\6\0\2\35\4\0\5\35\1\355\22\35"+
    "\1\0\1\35\31\0\3\35\6\0\2\35\4\0\22\35"+
    "\1\356\5\35\1\0\1\35\31\0\3\35\6\0\2\35"+
    "\4\0\20\35\1\357\7\35\1\0\1\35\31\0\3\35"+
    "\6\0\2\35\4\0\1\35\1\360\26\35\1\0\1\35"+
    "\31\0\3\35\6\0\2\35\4\0\11\35\1\361\16\35"+
    "\1\0\1\35\31\0\3\35\6\0\2\35\4\0\20\35"+
    "\1\362\7\35\1\0\1\35\31\0\3\35\6\0\2\35"+
    "\4\0\20\35\1\363\7\35\1\0\1\35\31\0\3\35"+
    "\6\0\2\35\4\0\5\35\1\364\22\35\1\0\1\35"+
    "\3\0\2\256\4\200\2\256\1\365\1\256\1\67\27\256"+
    "\1\67\36\256\1\200\2\256\4\200\34\256\1\332\36\256"+
    "\1\200\1\75\1\262\3\207\1\340\1\262\33\75\1\263"+
    "\36\75\1\14\1\177\1\334\1\102\1\131\1\274\1\102"+
    "\1\257\1\177\1\67\31\177\1\366\36\177\1\131\1\177"+
    "\1\334\1\201\2\274\1\267\1\257\1\177\1\172\31\177"+
    "\1\366\36\177\1\131\10\200\1\113\1\200\1\0\27\200"+
    "\1\0\47\200\1\367\31\200\1\266\37\200\1\14\2\207"+
    "\1\14\1\207\1\14\1\207\6\14\1\113\24\14\1\270"+
    "\37\14\2\0\3\271\1\272\74\0\1\131\1\274\3\201"+
    "\1\267\1\274\1\131\1\275\31\131\1\276\36\131\1\102"+
    "\26\0\3\35\6\0\2\35\4\0\17\35\1\370\10\35"+
    "\1\0\1\35\31\0\3\35\6\0\2\35\4\0\1\371"+
    "\27\35\1\0\1\35\31\0\3\35\6\0\2\35\4\0"+
    "\15\35\1\372\12\35\1\0\1\35\31\0\3\35\6\0"+
    "\2\35\4\0\4\35\1\373\23\35\1\0\1\35\31\0"+
    "\3\35\6\0\2\35\4\0\20\35\1\374\7\35\1\0"+
    "\1\35\31\0\3\35\6\0\2\35\4\0\20\35\1\375"+
    "\1\35\1\376\5\35\1\0\1\35\31\0\3\35\6\0"+
    "\2\35\4\0\5\35\1\377\22\35\1\0\1\35\31\0"+
    "\3\35\6\0\2\35\4\0\15\35\1\u0100\12\35\1\0"+
    "\1\35\31\0\3\35\6\0\2\35\4\0\13\35\1\u0101"+
    "\14\35\1\0\1\35\31\0\3\35\6\0\2\35\4\0"+
    "\3\35\1\u0102\24\35\1\0\1\35\31\0\3\35\6\0"+
    "\2\35\4\0\7\35\1\u0103\20\35\1\0\1\35\3\0"+
    "\2\256\4\200\2\256\1\67\1\256\1\67\27\256\1\67"+
    "\36\256\1\200\1\177\1\334\3\201\1\267\1\334\33\177"+
    "\1\335\36\177\1\102\10\200\1\u0104\1\200\1\0\27\200"+
    "\1\0\37\200\26\0\3\35\6\0\2\35\4\0\16\35"+
    "\1\u0105\11\35\1\0\1\35\31\0\3\35\6\0\2\35"+
    "\4\0\15\35\1\u0106\12\35\1\0\1\35\31\0\3\35"+
    "\6\0\2\35\4\0\23\35\1\u0107\4\35\1\0\1\35"+
    "\31\0\3\35\6\0\2\35\4\0\21\35\1\u0108\6\35"+
    "\1\0\1\35\31\0\3\35\6\0\2\35\4\0\21\35"+
    "\1\u0109\6\35\1\0\1\35\31\0\3\35\6\0\2\35"+
    "\4\0\21\35\1\u010a\6\35\1\0\1\35\31\0\3\35"+
    "\6\0\2\35\4\0\21\35\1\u010b\6\35\1\0\1\35"+
    "\31\0\3\35\6\0\2\35\4\0\11\35\1\u010c\16\35"+
    "\1\0\1\35\31\0\3\35\6\0\2\35\4\0\1\35"+
    "\1\u010d\26\35\1\0\1\35\31\0\3\35\6\0\2\35"+
    "\4\0\5\35\1\u010e\22\35\1\0\1\35\31\0\3\35"+
    "\6\0\2\35\4\0\27\35\1\u010f\1\0\1\35\31\0"+
    "\3\35\6\0\2\35\4\0\27\35\1\u0110\1\0\1\35"+
    "\31\0\3\35\6\0\2\35\4\0\27\35\1\u0111\1\0"+
    "\1\35\31\0\3\35\6\0\2\35\4\0\15\35\1\u0112"+
    "\12\35\1\0\1\35\31\0\3\35\6\0\2\35\4\0"+
    "\14\35\1\u0113\13\35\1\0\1\35\31\0\3\35\6\0"+
    "\2\35\4\0\15\35\1\u0114\12\35\1\0\1\35\31\0"+
    "\3\35\6\0\2\35\4\0\15\35\1\u0115\12\35\1\0"+
    "\1\35\31\0\3\35\6\0\2\35\4\0\15\35\1\u0116"+
    "\12\35\1\0\1\35\31\0\3\35\6\0\2\35\4\0"+
    "\22\35\1\u0117\5\35\1\0\1\35\31\0\3\35\6\0"+
    "\2\35\4\0\5\35\1\u0118\22\35\1\0\1\35\31\0"+
    "\3\35\6\0\2\35\4\0\3\35\1\u0119\24\35\1\0"+
    "\1\35\31\0\3\35\6\0\2\35\4\0\3\35\1\u011a"+
    "\24\35\1\0\1\35\31\0\3\35\6\0\2\35\4\0"+
    "\3\35\1\u011b\24\35\1\0\1\35\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[13728];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\7\1\2\11\2\1\1\11"+
    "\6\1\1\11\5\1\3\11\22\1\1\11\1\1\2\11"+
    "\10\1\3\11\1\0\1\1\2\0\1\1\1\0\1\11"+
    "\1\0\2\11\1\0\1\1\4\11\1\1\3\0\1\11"+
    "\2\1\1\0\46\1\2\0\1\1\1\0\2\11\1\0"+
    "\3\1\1\0\1\1\1\11\1\0\47\1\6\0\1\1"+
    "\1\0\1\1\1\0\37\1\2\0\1\1\2\0\24\1"+
    "\1\0\44\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[283];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    String oppening = "";
    int lastState = YYINITIAL;
    boolean lineEnded = false;
    int indent = 0;
    Stack<Integer> indentSizes = new Stack<>();
    boolean eofFinished = false;

    boolean newLineProcessed = false;
    // For signals and such, where Indents/NewLines do not matter
    boolean ignoreIndent = false;
    int ignored = 0;
    Stack<Integer> ignoreLambda = new Stack<>();
    Pattern nextNonCommentIndentPattern = Pattern.compile("\\n([ |\\t]*)[^#\\s]");

    public IElementType dedentRoot(IElementType type) {
        newLineProcessed = false;
        lineEnded = false;
        if (isIgnored() || yycolumn > 0 || indent <= 0 || indentSizes.empty()) {
            return type;
        }

        dedent();
        yypushback(yylength());

        return GdTypes.DEDENT;
    }

    public boolean dedentSpaces() {
        newLineProcessed = false;
        if (indent <= 0 || indentSizes.empty()) { // For EOF rule
            return false;
        }

        dedent();
        yypushback(yylength());

        return true;
    }

    private int nextNonCommentIndent() {
        Matcher matcher = nextNonCommentIndentPattern.matcher(zzBuffer.subSequence(Math.min(zzBuffer.length(), zzCurrentPos+yylength()), zzBuffer.length()));
        if (matcher.find()) {
            return matcher.group(1).length();
        }

        return -1;
    }

    private IElementType dedentComment(IElementType type) {
        int nextIndent = nextNonCommentIndent();
        if (nextIndent < 0 || isIgnored() || indent <= 0 || indentSizes.empty() || indent <= nextIndent || !newLineProcessed) {
            return type;
        }

        dedent();
        yypushback(yylength());

        return GdTypes.DEDENT;
    }

    private void dedent() {
        indent = Math.max(0, indent - indentSizes.pop());
    }

    private boolean isIgnored() {
        if (ignored <= 0) return false;
        if (!ignoreLambda.isEmpty()) {
            int diff = yycolumn;
            if (diff == 0) {
                diff = yylength();
            }

            return ignoreLambda.peek() > diff;
        }

        return true;
    }

    private void ignoredMinus() {
        if (!ignoreLambda.isEmpty() && ignoreLambda.peek() >= yycolumn) {
            ignoreLambda.pop();
        }
        ignored--;
    }

    private void markLambda() {
        if (ignored > 0) {
            int atIndent = 999;
            CharSequence spaces = zzBuffer.subSequence(zzCurrentPos - yycolumn, zzCurrentPos);
            if (spaces.toString().trim().isEmpty()) {
                atIndent = spaces.length();
            }

            ignoreLambda.push(atIndent);
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  GdLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                if (yycolumn > 0 && !eofFinished && !lineEnded) {
        eofFinished = true;
        return GdTypes.NEW_LINE;
    }

    if (indentSizes.empty()) {
        return null;
    }

    indentSizes.pop();
    yypushback(yylength());
    return GdTypes.DEDENT;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 91: break;
          case 2:
            { if (yycolumn == 0 && !ignoreIndent) {
            int spaces = yytext().length();
            if (spaces > indent) {
                if (isIgnored()) {
                    return TokenType.WHITE_SPACE;
                }

                indentSizes.push(spaces - indent);
                indent = spaces;

                return GdTypes.INDENT;
            } else if (indent > spaces) {
                dedentSpaces();
                return GdTypes.DEDENT;
            }
        }
        ignoreIndent = false;

        return TokenType.WHITE_SPACE;
            }
          // fall through
          case 92: break;
          case 3:
            { if (yycolumn == 0) {
            return TokenType.WHITE_SPACE;
        } else if (isIgnored()) {
            return TokenType.WHITE_SPACE;
        }

        if (newLineProcessed) {
            return TokenType.WHITE_SPACE;
        }

        newLineProcessed = true;
        return GdTypes.NEW_LINE;
            }
          // fall through
          case 93: break;
          case 4:
            { return dedentRoot(GdTypes.NEGATE);
            }
          // fall through
          case 94: break;
          case 5:
            { return dedentComment(GdTypes.COMMENT);
            }
          // fall through
          case 95: break;
          case 6:
            { if (yytext().toString().startsWith("%\"")) {
              String preceeding = zzBufferL.toString().substring(Math.max(0, zzCurrentPos - 100), zzCurrentPos).trim();
              if (preceeding.length() > 1 && preceeding.charAt(preceeding.length() - 1) == '"') {
                  yypushback(yylength() - 1);
                  return dedentRoot(GdTypes.MOD);
              }
          }

          return dedentRoot(GdTypes.NODE_PATH_LEX);
            }
          // fall through
          case 96: break;
          case 7:
            { return dedentRoot(GdTypes.MOD);
            }
          // fall through
          case 97: break;
          case 8:
            { return dedentRoot(GdTypes.AND);
            }
          // fall through
          case 98: break;
          case 9:
            { return dedentRoot(GdTypes.STRING);
            }
          // fall through
          case 99: break;
          case 10:
            { ignored++; return dedentRoot(GdTypes.LRBR);
            }
          // fall through
          case 100: break;
          case 11:
            { ignoredMinus(); return dedentRoot(GdTypes.RRBR);
            }
          // fall through
          case 101: break;
          case 12:
            { return dedentRoot(GdTypes.MUL);
            }
          // fall through
          case 102: break;
          case 13:
            { return dedentRoot(GdTypes.PLUS);
            }
          // fall through
          case 103: break;
          case 14:
            { return dedentRoot(GdTypes.COMMA);
            }
          // fall through
          case 104: break;
          case 15:
            { return dedentRoot(GdTypes.MINUS);
            }
          // fall through
          case 105: break;
          case 16:
            { return dedentRoot(GdTypes.DOT);
            }
          // fall through
          case 106: break;
          case 17:
            { return dedentRoot(GdTypes.DIV);
            }
          // fall through
          case 107: break;
          case 18:
            { return dedentRoot(GdTypes.NUMBER);
            }
          // fall through
          case 108: break;
          case 19:
            { return dedentRoot(GdTypes.COLON);
            }
          // fall through
          case 109: break;
          case 20:
            { newLineProcessed = true; return GdTypes.SEMICON;
            }
          // fall through
          case 110: break;
          case 21:
            { return GdTypes.TEST_OPERATOR;
            }
          // fall through
          case 111: break;
          case 22:
            { return dedentRoot(GdTypes.EQ);
            }
          // fall through
          case 112: break;
          case 23:
            { return dedentRoot(GdTypes.ANNOTATOR);
            }
          // fall through
          case 113: break;
          case 24:
            { return dedentRoot(GdTypes.IDENTIFIER);
            }
          // fall through
          case 114: break;
          case 25:
            { ignored++; return dedentRoot(GdTypes.LSBR);
            }
          // fall through
          case 115: break;
          case 26:
            { newLineProcessed = true; ignoreIndent = true; return GdTypes.BACKSLASH;
            }
          // fall through
          case 116: break;
          case 27:
            { ignoredMinus(); return dedentRoot(GdTypes.RSBR);
            }
          // fall through
          case 117: break;
          case 28:
            { return dedentRoot(GdTypes.XOR);
            }
          // fall through
          case 118: break;
          case 29:
            { return dedentRoot(GdTypes.UNDER);
            }
          // fall through
          case 119: break;
          case 30:
            { ignored++; return dedentRoot(GdTypes.LCBR);
            }
          // fall through
          case 120: break;
          case 31:
            { return dedentRoot(GdTypes.OR);
            }
          // fall through
          case 121: break;
          case 32:
            { ignoredMinus(); return dedentRoot(GdTypes.RCBR);
            }
          // fall through
          case 122: break;
          case 33:
            { return dedentRoot(GdTypes.NOT);
            }
          // fall through
          case 123: break;
          case 34:
            { yybegin(lastState);
        yypushback(yylength());

        return GdTypes.INDENT;
            }
          // fall through
          case 124: break;
          case 35:
            { if (yycolumn > 0) { yypushback(1); } return TokenType.WHITE_SPACE;
            }
          // fall through
          case 125: break;
          case 36:
            { yypushback(1);
        if (yycolumn == 0) {
            newLineProcessed = true;
        }

        return TokenType.WHITE_SPACE;
            }
          // fall through
          case 126: break;
          case 37:
            { return GdTypes.ASSIGN;
            }
          // fall through
          case 127: break;
          case 38:
            { return dedentRoot(GdTypes.ANDAND);
            }
          // fall through
          case 128: break;
          case 39:
            { return dedentRoot(GdTypes.POWER);
            }
          // fall through
          case 129: break;
          case 40:
            { return dedentRoot(GdTypes.PPLUS);
            }
          // fall through
          case 130: break;
          case 41:
            { return dedentRoot(GdTypes.MMINUS);
            }
          // fall through
          case 131: break;
          case 42:
            { return dedentRoot(GdTypes.RET);
            }
          // fall through
          case 132: break;
          case 43:
            { return dedentRoot(GdTypes.DOTDOT);
            }
          // fall through
          case 133: break;
          case 44:
            { return dedentRoot(GdTypes.CEQ);
            }
          // fall through
          case 134: break;
          case 45:
            { return dedentRoot(GdTypes.LBSHIFT);
            }
          // fall through
          case 135: break;
          case 46:
            { return dedentRoot(GdTypes.RBSHIFT);
            }
          // fall through
          case 136: break;
          case 47:
            { return dedentRoot(GdTypes.AS);
            }
          // fall through
          case 137: break;
          case 48:
            { return dedentRoot(GdTypes.IF);
            }
          // fall through
          case 138: break;
          case 49:
            { return dedentRoot(GdTypes.IN);
            }
          // fall through
          case 139: break;
          case 50:
            { return dedentRoot(GdTypes.IS);
            }
          // fall through
          case 140: break;
          case 51:
            { return dedentRoot(GdTypes.OROR);
            }
          // fall through
          case 141: break;
          case 52:
            { return dedentRoot(GdTypes.STRING_NAME);
            }
          // fall through
          case 142: break;
          case 53:
            { return dedentRoot(GdTypes.NODE_PATH_LIT);
            }
          // fall through
          case 143: break;
          case 54:
            { return dedentRoot(GdTypes.FOR);
            }
          // fall through
          case 144: break;
          case 55:
            { return dedentRoot(GdTypes.GET);
            }
          // fall through
          case 145: break;
          case 56:
            { return dedentRoot(GdTypes.INF);
            }
          // fall through
          case 146: break;
          case 57:
            { return dedentRoot(GdTypes.NAN);
            }
          // fall through
          case 147: break;
          case 58:
            { return dedentRoot(GdTypes.SET);
            }
          // fall through
          case 148: break;
          case 59:
            { return dedentRoot(GdTypes.VAR);
            }
          // fall through
          case 149: break;
          case 60:
            { return dedentRoot(GdTypes.ELIF);
            }
          // fall through
          case 150: break;
          case 61:
            { return dedentRoot(GdTypes.ELSE);
            }
          // fall through
          case 151: break;
          case 62:
            { return dedentRoot(GdTypes.ENUM);
            }
          // fall through
          case 152: break;
          case 63:
            { markLambda(); return dedentRoot(GdTypes.FUNC);
            }
          // fall through
          case 153: break;
          case 64:
            { return dedentRoot(GdTypes.NULL);
            }
          // fall through
          case 154: break;
          case 65:
            { return dedentRoot(GdTypes.PASS);
            }
          // fall through
          case 155: break;
          case 66:
            { return dedentRoot(GdTypes.SELF);
            }
          // fall through
          case 156: break;
          case 67:
            { return dedentRoot(GdTypes.TRUE);
            }
          // fall through
          case 157: break;
          case 68:
            { return dedentRoot(GdTypes.VOID);
            }
          // fall through
          case 158: break;
          case 69:
            { return dedentRoot(GdTypes.AWAIT);
            }
          // fall through
          case 159: break;
          case 70:
            { return dedentRoot(GdTypes.BREAK);
            }
          // fall through
          case 160: break;
          case 71:
            { return dedentRoot(GdTypes.CLASS);
            }
          // fall through
          case 161: break;
          case 72:
            { return dedentRoot(GdTypes.CONST);
            }
          // fall through
          case 162: break;
          case 73:
            { return dedentRoot(GdTypes.FALSE);
            }
          // fall through
          case 163: break;
          case 74:
            { return dedentRoot(GdTypes.MATCH);
            }
          // fall through
          case 164: break;
          case 75:
            { return dedentRoot(GdTypes.SUPER);
            }
          // fall through
          case 165: break;
          case 76:
            { return dedentRoot(GdTypes.WHILE);
            }
          // fall through
          case 166: break;
          case 77:
            { return dedentRoot(GdTypes.MASTER);
            }
          // fall through
          case 167: break;
          case 78:
            { return dedentRoot(GdTypes.PUPPET);
            }
          // fall through
          case 168: break;
          case 79:
            { return dedentRoot(GdTypes.REMOTE);
            }
          // fall through
          case 169: break;
          case 80:
            { return dedentRoot(GdTypes.RETURN);
            }
          // fall through
          case 170: break;
          case 81:
            { return dedentRoot(GdTypes.SIGNAL);
            }
          // fall through
          case 171: break;
          case 82:
            { return dedentRoot(GdTypes.STATIC);
            }
          // fall through
          case 172: break;
          case 83:
            { return dedentRoot(GdTypes.VARARG);
            }
          // fall through
          case 173: break;
          case 84:
            { return dedentRoot(GdTypes.EXTENDS);
            }
          // fall through
          case 174: break;
          case 85:
            { return dedentRoot(GdTypes.CONTINUE);
            }
          // fall through
          case 175: break;
          case 86:
            { return dedentRoot(GdTypes.BREAKPOINT);
            }
          // fall through
          case 176: break;
          case 87:
            { return dedentRoot(GdTypes.CLASS_NAME);
            }
          // fall through
          case 177: break;
          case 88:
            { return dedentRoot(GdTypes.MASTERSYNC);
            }
          // fall through
          case 178: break;
          case 89:
            { return dedentRoot(GdTypes.PUPPETSYNC);
            }
          // fall through
          case 179: break;
          case 90:
            { return dedentRoot(GdTypes.REMOTESYNC);
            }
          // fall through
          case 180: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
