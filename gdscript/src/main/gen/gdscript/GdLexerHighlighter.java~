// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: GdHighlight.flex

package gdscript;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import gdscript.psi.GdTokenType;
import gdscript.psi.GdTypes;
import java.util.Stack;


class GdLexerHighlighter implements FlexLexer {
 /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\10\30\1\31\1\32\1\33\1\34\1\35\1\0"+
    "\1\36\6\37\24\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\0\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\40\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\40\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\40\1\75\1\76\1\77\1\100\6\0"+
    "\1\3\u01a2\0\2\3\326\0\u0100\101";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\2\21\1\22\1\23\1\24\1\25\1\24"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\20\27"+
    "\1\35\1\36\1\37\1\40\1\24\1\0\1\10\2\0"+
    "\1\5\1\0\1\41\1\0\1\42\1\10\1\0\1\43"+
    "\1\44\1\45\1\46\1\47\1\21\3\0\1\50\1\51"+
    "\1\52\1\0\1\27\1\53\13\27\1\54\1\55\1\56"+
    "\4\27\1\57\13\27\2\0\1\10\1\0\1\5\1\60"+
    "\1\0\2\10\1\21\1\0\1\21\1\61\1\0\1\42"+
    "\11\27\1\62\1\27\1\63\1\64\2\27\1\65\1\3"+
    "\6\27\1\66\4\27\1\67\2\27\6\0\1\21\1\0"+
    "\1\10\1\0\5\27\1\70\1\71\1\72\2\27\1\73"+
    "\2\27\1\74\1\75\3\27\1\76\3\27\1\77\1\27"+
    "\1\100\1\27\2\0\1\10\2\0\1\61\1\101\1\102"+
    "\1\103\1\104\2\27\1\105\1\27\1\106\5\27\1\107"+
    "\1\27\1\110\1\0\4\27\1\111\1\112\1\27\1\113"+
    "\1\114\1\115\1\116\1\117\1\10\3\27\1\120\5\27"+
    "\1\121\10\27\1\122\1\123\1\124\1\125\1\126";

  private static int [] zzUnpackAction() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\102\0\306\0\u0108\0\u014a\0\u018c"+
    "\0\u01ce\0\u0210\0\u0252\0\102\0\102\0\u0294\0\u02d6\0\102"+
    "\0\u0318\0\u035a\0\u039c\0\u03de\0\u0420\0\u0462\0\102\0\u04a4"+
    "\0\306\0\u04e6\0\u0528\0\u056a\0\102\0\102\0\102\0\u05ac"+
    "\0\u056a\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a"+
    "\0\u07bc\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\u098a"+
    "\0\u09cc\0\102\0\u0a0e\0\102\0\102\0\102\0\u0a50\0\u0a92"+
    "\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a\0\102\0\u0bdc\0\102\0\102"+
    "\0\u0c1e\0\u039c\0\102\0\102\0\102\0\102\0\u0c60\0\u0ca2"+
    "\0\u0ce4\0\u0d26\0\102\0\u039c\0\u039c\0\u0d68\0\u0daa\0\u056a"+
    "\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0fba"+
    "\0\u0ffc\0\u103e\0\u1080\0\u056a\0\u10c2\0\u056a\0\u1104\0\u1146"+
    "\0\u1188\0\u11ca\0\u056a\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314"+
    "\0\u1356\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u1524"+
    "\0\u0a50\0\u1566\0\102\0\102\0\u15a8\0\u15ea\0\u162c\0\u0ca2"+
    "\0\u166e\0\u0d26\0\102\0\u16b0\0\u056a\0\u16f2\0\u1734\0\u1776"+
    "\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902\0\u056a\0\u1944"+
    "\0\u056a\0\u056a\0\u1986\0\u19c8\0\u056a\0\u056a\0\u1a0a\0\u1a4c"+
    "\0\u1a8e\0\u1ad0\0\u1b12\0\u1b54\0\u056a\0\u1b96\0\u1bd8\0\u1c1a"+
    "\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\u1da6\0\u1de8\0\u1e2a"+
    "\0\u1e6c\0\u1eae\0\u166e\0\u1ef0\0\u0d68\0\u1f32\0\u1f74\0\u1fb6"+
    "\0\u1ff8\0\u203a\0\u207c\0\u056a\0\u056a\0\u056a\0\u20be\0\u2100"+
    "\0\u056a\0\u2142\0\u2184\0\u056a\0\u056a\0\u21c6\0\u2208\0\u224a"+
    "\0\u056a\0\u228c\0\u22ce\0\u2310\0\u056a\0\u2352\0\u056a\0\u2394"+
    "\0\u23d6\0\u2418\0\u245a\0\u249c\0\u24de\0\u0a50\0\u056a\0\u2520"+
    "\0\u2562\0\u056a\0\u25a4\0\u25e6\0\u056a\0\u2628\0\u056a\0\u266a"+
    "\0\u26ac\0\u26ee\0\u2730\0\u2772\0\u056a\0\u27b4\0\u056a\0\u27f6"+
    "\0\u2838\0\u287a\0\u28bc\0\u28fe\0\u2940\0\u056a\0\u2982\0\u29c4"+
    "\0\u056a\0\u056a\0\u056a\0\u056a\0\u23d6\0\u2a06\0\u2a48\0\u2a8a"+
    "\0\u056a\0\u2acc\0\u2b0e\0\u2b50\0\u2b92\0\u2bd4\0\u056a\0\u2c16"+
    "\0\u2c58\0\u2c9a\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2\0\u2de4\0\u056a"+
    "\0\u056a\0\u056a\0\u056a\0\u056a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\2\2\1\4\1\3\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\2\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\2\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\34\1\45"+
    "\1\46\1\47\1\34\1\50\2\34\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\34\1\60\1\61\2\34"+
    "\1\62\1\63\1\64\1\65\1\2\103\0\1\3\4\0"+
    "\1\3\127\0\1\66\45\0\2\67\1\0\2\67\1\0"+
    "\2\67\1\70\31\67\1\71\37\67\2\7\1\0\2\7"+
    "\1\0\74\7\10\0\1\72\2\0\1\73\11\0\4\73"+
    "\6\0\2\73\4\0\30\73\15\0\1\74\2\0\1\73"+
    "\11\0\4\73\3\0\1\75\2\0\2\73\4\0\30\73"+
    "\15\0\1\76\3\0\1\77\17\0\1\75\45\0\2\13"+
    "\1\0\2\13\1\0\7\13\1\100\24\13\1\101\37\13"+
    "\20\0\1\102\13\0\1\75\66\0\1\103\12\0\1\75"+
    "\70\0\1\104\10\0\1\75\1\105\70\0\1\106\1\0"+
    "\3\107\105\0\1\75\71\0\1\107\1\0\3\25\14\0"+
    "\1\25\1\0\1\110\2\0\1\111\20\0\1\112\32\0"+
    "\1\107\1\0\3\25\14\0\1\25\4\0\1\111\63\0"+
    "\1\113\100\0\1\114\1\66\101\0\1\66\1\115\103\0"+
    "\2\33\4\0\30\33\33\0\3\34\6\0\2\34\4\0"+
    "\30\34\1\0\1\34\13\0\1\116\23\0\1\75\73\0"+
    "\3\34\6\0\2\34\4\0\15\34\1\117\3\34\1\120"+
    "\3\34\1\121\2\34\1\0\1\34\31\0\3\34\6\0"+
    "\2\34\4\0\20\34\1\122\7\34\1\0\1\34\31\0"+
    "\3\34\6\0\2\34\4\0\13\34\1\123\2\34\1\124"+
    "\11\34\1\0\1\34\31\0\3\34\6\0\2\34\4\0"+
    "\13\34\1\125\1\34\1\126\10\34\1\127\1\34\1\0"+
    "\1\34\31\0\3\34\6\0\2\34\4\0\1\34\1\130"+
    "\14\34\1\131\4\34\1\132\4\34\1\0\1\34\31\0"+
    "\3\34\6\0\2\34\4\0\5\34\1\133\22\34\1\0"+
    "\1\34\31\0\3\34\6\0\2\34\4\0\6\34\1\134"+
    "\6\34\1\135\3\34\1\136\6\34\1\0\1\34\31\0"+
    "\3\34\6\0\2\34\4\0\1\34\1\137\26\34\1\0"+
    "\1\34\31\0\3\34\6\0\2\34\4\0\1\34\1\140"+
    "\14\34\1\141\4\34\1\142\4\34\1\0\1\34\31\0"+
    "\3\34\6\0\2\34\4\0\20\34\1\143\7\34\1\0"+
    "\1\34\31\0\3\34\6\0\2\34\4\0\1\34\1\144"+
    "\21\34\1\145\4\34\1\0\1\34\31\0\3\34\6\0"+
    "\2\34\4\0\5\34\1\146\22\34\1\0\1\34\31\0"+
    "\3\34\6\0\2\34\4\0\5\34\1\147\3\34\1\150"+
    "\10\34\1\151\1\152\4\34\1\0\1\34\31\0\3\34"+
    "\6\0\2\34\4\0\20\34\1\153\7\34\1\0\1\34"+
    "\31\0\3\34\6\0\2\34\4\0\1\34\1\154\14\34"+
    "\1\155\11\34\1\0\1\34\31\0\3\34\6\0\2\34"+
    "\4\0\10\34\1\156\17\34\1\0\1\34\31\0\3\34"+
    "\3\0\1\75\2\0\2\34\4\0\30\34\1\0\1\143"+
    "\3\0\2\67\1\0\2\67\1\0\2\67\1\100\31\67"+
    "\1\71\37\67\10\0\1\157\71\0\1\67\1\160\2\67"+
    "\1\160\1\67\1\160\1\67\1\161\31\67\1\162\41\67"+
    "\1\0\2\67\1\0\1\72\1\67\1\163\2\67\1\72"+
    "\10\67\6\72\5\67\2\72\1\67\1\71\2\67\30\72"+
    "\5\67\13\0\1\73\11\0\4\73\6\0\2\73\4\0"+
    "\30\73\13\0\1\74\1\0\1\163\2\0\1\74\10\0"+
    "\6\74\5\0\2\74\4\0\30\74\5\0\2\76\1\0"+
    "\2\76\1\0\2\76\1\164\31\76\1\165\37\76\1\13"+
    "\1\166\2\13\1\166\1\13\1\166\33\13\1\167\37\13"+
    "\26\0\3\107\14\0\1\107\4\0\1\111\55\0\2\170"+
    "\15\0\1\170\57\0\1\171\104\0\3\172\6\0\1\172"+
    "\5\0\7\172\26\0\2\116\1\0\2\116\1\0\1\67"+
    "\1\116\1\173\31\116\1\174\37\116\26\0\3\34\6\0"+
    "\2\34\4\0\4\34\1\175\23\34\1\0\1\34\31\0"+
    "\3\34\6\0\2\34\4\0\1\34\1\176\26\34\1\0"+
    "\1\34\31\0\3\34\6\0\2\34\4\0\5\34\1\177"+
    "\22\34\1\0\1\34\31\0\3\34\6\0\2\34\4\0"+
    "\1\34\1\200\26\34\1\0\1\34\31\0\3\34\6\0"+
    "\2\34\4\0\15\34\1\201\12\34\1\0\1\34\31\0"+
    "\3\34\6\0\2\34\4\0\11\34\1\202\7\34\1\203"+
    "\6\34\1\0\1\34\31\0\3\34\6\0\2\34\4\0"+
    "\23\34\1\204\4\34\1\0\1\34\31\0\3\34\6\0"+
    "\2\34\4\0\22\34\1\205\5\34\1\0\1\34\31\0"+
    "\3\34\6\0\2\34\4\0\13\34\1\206\14\34\1\0"+
    "\1\34\31\0\3\34\6\0\2\34\4\0\20\34\1\207"+
    "\7\34\1\0\1\34\31\0\3\34\6\0\2\34\4\0"+
    "\15\34\1\210\12\34\1\0\1\34\31\0\3\34\6\0"+
    "\2\34\4\0\22\34\1\211\5\34\1\0\1\34\31\0"+
    "\3\34\6\0\2\34\4\0\6\34\1\212\21\34\1\0"+
    "\1\34\31\0\3\34\6\0\2\34\4\0\21\34\1\213"+
    "\1\214\5\34\1\0\1\34\31\0\3\34\6\0\2\34"+
    "\4\0\15\34\1\215\12\34\1\0\1\34\31\0\3\34"+
    "\6\0\2\34\4\0\22\34\1\216\5\34\1\0\1\34"+
    "\31\0\3\34\6\0\2\34\4\0\13\34\1\217\14\34"+
    "\1\0\1\34\31\0\3\34\6\0\2\34\4\0\21\34"+
    "\1\220\6\34\1\0\1\34\31\0\3\34\6\0\2\34"+
    "\4\0\17\34\1\221\10\34\1\0\1\34\31\0\3\34"+
    "\6\0\2\34\4\0\14\34\1\222\5\34\1\223\5\34"+
    "\1\0\1\34\31\0\3\34\6\0\2\34\4\0\13\34"+
    "\1\224\6\34\1\225\5\34\1\0\1\34\31\0\3\34"+
    "\6\0\2\34\4\0\7\34\1\226\20\34\1\0\1\34"+
    "\31\0\3\34\6\0\2\34\4\0\1\34\1\227\26\34"+
    "\1\0\1\34\31\0\3\34\6\0\2\34\4\0\17\34"+
    "\1\230\10\34\1\0\1\34\31\0\3\34\6\0\2\34"+
    "\4\0\23\34\1\231\4\34\1\0\1\34\31\0\3\34"+
    "\6\0\2\34\4\0\20\34\1\232\7\34\1\0\1\34"+
    "\31\0\3\34\6\0\2\34\4\0\11\34\1\233\16\34"+
    "\1\0\1\34\31\0\3\34\6\0\2\34\4\0\11\34"+
    "\1\234\16\34\1\0\1\34\3\0\10\157\1\235\31\157"+
    "\1\236\37\157\1\67\1\160\2\67\1\160\1\67\1\160"+
    "\1\67\1\100\31\67\1\162\40\67\4\160\1\237\1\160"+
    "\1\67\1\161\31\67\1\162\37\67\2\76\4\0\73\76"+
    "\1\0\1\13\1\166\2\13\1\166\1\13\1\166\6\13"+
    "\1\100\24\13\1\240\41\13\1\241\2\166\1\242\7\13"+
    "\1\100\24\13\1\101\37\13\26\0\3\243\51\0\1\116"+
    "\1\244\2\67\1\160\1\67\1\244\1\116\1\245\31\116"+
    "\1\246\36\116\1\67\26\0\3\34\6\0\2\34\4\0"+
    "\11\34\1\247\16\34\1\0\1\34\31\0\3\34\6\0"+
    "\2\34\4\0\1\34\1\250\26\34\1\0\1\34\31\0"+
    "\3\34\6\0\2\34\4\0\21\34\1\251\6\34\1\0"+
    "\1\34\31\0\3\34\6\0\2\34\4\0\21\34\1\252"+
    "\1\253\5\34\1\0\1\34\31\0\3\34\6\0\2\34"+
    "\4\0\6\34\1\254\21\34\1\0\1\34\31\0\3\34"+
    "\6\0\2\34\4\0\5\34\1\255\22\34\1\0\1\34"+
    "\31\0\3\34\6\0\2\34\4\0\14\34\1\256\13\34"+
    "\1\0\1\34\31\0\3\34\6\0\2\34\4\0\5\34"+
    "\1\257\22\34\1\0\1\34\31\0\3\34\6\0\2\34"+
    "\4\0\21\34\1\260\6\34\1\0\1\34\31\0\3\34"+
    "\6\0\2\34\4\0\3\34\1\261\24\34\1\0\1\34"+
    "\31\0\3\34\6\0\2\34\4\0\22\34\1\262\5\34"+
    "\1\0\1\34\31\0\3\34\6\0\2\34\4\0\3\34"+
    "\1\263\24\34\1\0\1\34\31\0\3\34\6\0\2\34"+
    "\4\0\13\34\1\264\14\34\1\0\1\34\31\0\3\34"+
    "\6\0\2\34\4\0\21\34\1\265\6\34\1\0\1\34"+
    "\31\0\3\34\6\0\2\34\4\0\17\34\1\266\10\34"+
    "\1\0\1\34\31\0\3\34\6\0\2\34\4\0\16\34"+
    "\1\267\11\34\1\0\1\34\31\0\3\34\6\0\2\34"+
    "\4\0\23\34\1\270\4\34\1\0\1\34\31\0\3\34"+
    "\6\0\2\34\4\0\6\34\1\271\21\34\1\0\1\34"+
    "\31\0\3\34\6\0\2\34\4\0\15\34\1\272\12\34"+
    "\1\0\1\34\31\0\3\34\6\0\2\34\4\0\22\34"+
    "\1\273\5\34\1\0\1\34\31\0\3\34\6\0\2\34"+
    "\4\0\5\34\1\274\22\34\1\0\1\34\31\0\3\34"+
    "\6\0\2\34\4\0\5\34\1\275\22\34\1\0\1\34"+
    "\31\0\3\34\6\0\2\34\4\0\1\34\1\276\26\34"+
    "\1\0\1\34\31\0\3\34\6\0\2\34\4\0\4\34"+
    "\1\277\23\34\1\0\1\34\31\0\3\34\6\0\2\34"+
    "\4\0\13\34\1\300\14\34\1\0\1\34\3\0\10\157"+
    "\1\301\1\157\1\0\27\157\1\0\47\157\1\302\31\157"+
    "\1\236\37\157\1\67\2\160\1\67\1\160\1\67\1\160"+
    "\1\67\1\100\31\67\1\162\37\67\1\13\4\166\1\303"+
    "\1\166\33\13\1\167\37\13\1\0\1\241\1\13\1\0"+
    "\1\241\1\13\1\241\33\0\1\304\40\0\1\241\1\166"+
    "\1\0\1\241\1\13\1\241\33\0\1\304\37\0\1\116"+
    "\1\244\1\67\1\116\1\244\1\67\1\160\1\116\1\173"+
    "\31\116\1\305\40\116\1\244\1\160\2\244\1\237\1\160"+
    "\1\116\1\306\31\116\1\305\37\116\26\0\3\34\6\0"+
    "\2\34\4\0\22\34\1\307\5\34\1\0\1\34\31\0"+
    "\3\34\6\0\2\34\4\0\12\34\1\310\15\34\1\0"+
    "\1\34\31\0\3\34\6\0\2\34\4\0\21\34\1\311"+
    "\6\34\1\0\1\34\31\0\3\34\6\0\2\34\4\0"+
    "\22\34\1\312\5\34\1\0\1\34\31\0\3\34\6\0"+
    "\2\34\4\0\11\34\1\313\16\34\1\0\1\34\31\0"+
    "\3\34\6\0\2\34\4\0\15\34\1\314\12\34\1\0"+
    "\1\34\31\0\3\34\6\0\2\34\4\0\5\34\1\315"+
    "\22\34\1\0\1\34\31\0\3\34\6\0\2\34\4\0"+
    "\5\34\1\316\22\34\1\0\1\34\31\0\3\34\6\0"+
    "\2\34\4\0\10\34\1\317\17\34\1\0\1\34\31\0"+
    "\3\34\6\0\2\34\4\0\5\34\1\320\22\34\1\0"+
    "\1\34\31\0\3\34\6\0\2\34\4\0\22\34\1\321"+
    "\5\34\1\0\1\34\31\0\3\34\6\0\2\34\4\0"+
    "\20\34\1\322\7\34\1\0\1\34\31\0\3\34\6\0"+
    "\2\34\4\0\1\34\1\323\26\34\1\0\1\34\31\0"+
    "\3\34\6\0\2\34\4\0\11\34\1\324\16\34\1\0"+
    "\1\34\31\0\3\34\6\0\2\34\4\0\20\34\1\325"+
    "\7\34\1\0\1\34\31\0\3\34\6\0\2\34\4\0"+
    "\20\34\1\326\7\34\1\0\1\34\31\0\3\34\6\0"+
    "\2\34\4\0\5\34\1\327\22\34\1\0\1\34\3\0"+
    "\10\157\1\100\1\157\1\0\27\157\1\0\47\157\1\330"+
    "\31\157\1\236\37\157\1\13\2\166\1\13\1\166\1\13"+
    "\1\166\6\13\1\100\24\13\1\240\37\13\2\0\3\241"+
    "\1\242\74\0\1\116\1\244\3\160\1\237\1\244\1\116"+
    "\1\245\31\116\1\246\36\116\1\67\26\0\3\34\6\0"+
    "\2\34\4\0\17\34\1\331\10\34\1\0\1\34\31\0"+
    "\3\34\6\0\2\34\4\0\1\332\27\34\1\0\1\34"+
    "\31\0\3\34\6\0\2\34\4\0\15\34\1\333\12\34"+
    "\1\0\1\34\31\0\3\34\6\0\2\34\4\0\4\34"+
    "\1\334\23\34\1\0\1\34\31\0\3\34\6\0\2\34"+
    "\4\0\20\34\1\335\7\34\1\0\1\34\31\0\3\34"+
    "\6\0\2\34\4\0\20\34\1\336\1\34\1\337\5\34"+
    "\1\0\1\34\31\0\3\34\6\0\2\34\4\0\5\34"+
    "\1\340\22\34\1\0\1\34\31\0\3\34\6\0\2\34"+
    "\4\0\15\34\1\341\12\34\1\0\1\34\31\0\3\34"+
    "\6\0\2\34\4\0\13\34\1\342\14\34\1\0\1\34"+
    "\31\0\3\34\6\0\2\34\4\0\3\34\1\343\24\34"+
    "\1\0\1\34\31\0\3\34\6\0\2\34\4\0\7\34"+
    "\1\344\20\34\1\0\1\34\3\0\10\157\1\345\1\157"+
    "\1\0\27\157\1\0\37\157\26\0\3\34\6\0\2\34"+
    "\4\0\16\34\1\346\11\34\1\0\1\34\31\0\3\34"+
    "\6\0\2\34\4\0\15\34\1\347\12\34\1\0\1\34"+
    "\31\0\3\34\6\0\2\34\4\0\23\34\1\350\4\34"+
    "\1\0\1\34\31\0\3\34\6\0\2\34\4\0\21\34"+
    "\1\351\6\34\1\0\1\34\31\0\3\34\6\0\2\34"+
    "\4\0\21\34\1\352\6\34\1\0\1\34\31\0\3\34"+
    "\6\0\2\34\4\0\21\34\1\353\6\34\1\0\1\34"+
    "\31\0\3\34\6\0\2\34\4\0\21\34\1\354\6\34"+
    "\1\0\1\34\31\0\3\34\6\0\2\34\4\0\11\34"+
    "\1\355\16\34\1\0\1\34\31\0\3\34\6\0\2\34"+
    "\4\0\1\34\1\356\26\34\1\0\1\34\31\0\3\34"+
    "\6\0\2\34\4\0\5\34\1\357\22\34\1\0\1\34"+
    "\31\0\3\34\6\0\2\34\4\0\27\34\1\360\1\0"+
    "\1\34\31\0\3\34\6\0\2\34\4\0\27\34\1\361"+
    "\1\0\1\34\31\0\3\34\6\0\2\34\4\0\27\34"+
    "\1\362\1\0\1\34\31\0\3\34\6\0\2\34\4\0"+
    "\15\34\1\363\12\34\1\0\1\34\31\0\3\34\6\0"+
    "\2\34\4\0\14\34\1\364\13\34\1\0\1\34\31\0"+
    "\3\34\6\0\2\34\4\0\15\34\1\365\12\34\1\0"+
    "\1\34\31\0\3\34\6\0\2\34\4\0\15\34\1\366"+
    "\12\34\1\0\1\34\31\0\3\34\6\0\2\34\4\0"+
    "\15\34\1\367\12\34\1\0\1\34\31\0\3\34\6\0"+
    "\2\34\4\0\22\34\1\370\5\34\1\0\1\34\31\0"+
    "\3\34\6\0\2\34\4\0\5\34\1\371\22\34\1\0"+
    "\1\34\31\0\3\34\6\0\2\34\4\0\3\34\1\372"+
    "\24\34\1\0\1\34\31\0\3\34\6\0\2\34\4\0"+
    "\3\34\1\373\24\34\1\0\1\34\31\0\3\34\6\0"+
    "\2\34\4\0\3\34\1\374\24\34\1\0\1\34\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[11814];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\7\1\2\11\2\1\1\11"+
    "\6\1\1\11\5\1\3\11\22\1\1\11\1\1\3\11"+
    "\1\0\1\1\2\0\1\1\1\0\1\11\1\0\2\11"+
    "\1\0\1\1\4\11\1\1\3\0\1\11\2\1\1\0"+
    "\40\1\2\0\1\1\1\0\2\11\1\0\3\1\1\0"+
    "\1\1\1\11\1\0\40\1\6\0\1\1\1\0\1\1"+
    "\1\0\32\1\2\0\1\1\2\0\22\1\1\0\44\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[252];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    String oppening = "";
    int lastState = YYINITIAL;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  GdLexerHighlighter(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return null;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 87: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 88: break;
          case 3:
            { return GdTypes.NEGATE;
            }
          // fall through
          case 89: break;
          case 4:
            { return GdTypes.COMMENT;
            }
          // fall through
          case 90: break;
          case 5:
            { if (yytext().toString().startsWith("%\"")) {
              String preceeding = zzBufferL.toString().substring(Math.max(0, zzCurrentPos - 100), zzCurrentPos).trim();
              if (preceeding.length() > 1 && preceeding.charAt(preceeding.length() - 1) == '"') {
                  yypushback(yylength() - 1);
                  return GdTypes.MOD;
              }
          }

          return GdTypes.NODE_PATH_LEX;
            }
          // fall through
          case 91: break;
          case 6:
            { return GdTypes.MOD;
            }
          // fall through
          case 92: break;
          case 7:
            { return GdTypes.AND;
            }
          // fall through
          case 93: break;
          case 8:
            { return GdTypes.STRING;
            }
          // fall through
          case 94: break;
          case 9:
            { return GdTypes.LRBR;
            }
          // fall through
          case 95: break;
          case 10:
            { return GdTypes.RRBR;
            }
          // fall through
          case 96: break;
          case 11:
            { return GdTypes.MUL;
            }
          // fall through
          case 97: break;
          case 12:
            { return GdTypes.PLUS;
            }
          // fall through
          case 98: break;
          case 13:
            { return GdTypes.COMMA;
            }
          // fall through
          case 99: break;
          case 14:
            { return GdTypes.MINUS;
            }
          // fall through
          case 100: break;
          case 15:
            { return GdTypes.DOT;
            }
          // fall through
          case 101: break;
          case 16:
            { return GdTypes.DIV;
            }
          // fall through
          case 102: break;
          case 17:
            { return GdTypes.NUMBER;
            }
          // fall through
          case 103: break;
          case 18:
            { return GdTypes.COLON;
            }
          // fall through
          case 104: break;
          case 19:
            { return GdTypes.SEMICON;
            }
          // fall through
          case 105: break;
          case 20:
            { return GdTypes.TEST_OPERATOR;
            }
          // fall through
          case 106: break;
          case 21:
            { return GdTypes.EQ;
            }
          // fall through
          case 107: break;
          case 22:
            { return GdTypes.ANNOTATOR;
            }
          // fall through
          case 108: break;
          case 23:
            { return GdTypes.IDENTIFIER;
            }
          // fall through
          case 109: break;
          case 24:
            { return GdTypes.LSBR;
            }
          // fall through
          case 110: break;
          case 25:
            { return GdTypes.BACKSLASH;
            }
          // fall through
          case 111: break;
          case 26:
            { return GdTypes.RSBR;
            }
          // fall through
          case 112: break;
          case 27:
            { return GdTypes.XOR;
            }
          // fall through
          case 113: break;
          case 28:
            { return GdTypes.UNDER;
            }
          // fall through
          case 114: break;
          case 29:
            { return GdTypes.LCBR;
            }
          // fall through
          case 115: break;
          case 30:
            { return GdTypes.OR;
            }
          // fall through
          case 116: break;
          case 31:
            { return GdTypes.RCBR;
            }
          // fall through
          case 117: break;
          case 32:
            { return GdTypes.NOT;
            }
          // fall through
          case 118: break;
          case 33:
            { return GdTypes.ASSIGN;
            }
          // fall through
          case 119: break;
          case 34:
            { return GdTypes.ANDAND;
            }
          // fall through
          case 120: break;
          case 35:
            { return GdTypes.POWER;
            }
          // fall through
          case 121: break;
          case 36:
            { return GdTypes.PPLUS;
            }
          // fall through
          case 122: break;
          case 37:
            { return GdTypes.MMINUS;
            }
          // fall through
          case 123: break;
          case 38:
            { return GdTypes.RET;
            }
          // fall through
          case 124: break;
          case 39:
            { return GdTypes.DOTDOT;
            }
          // fall through
          case 125: break;
          case 40:
            { return GdTypes.CEQ;
            }
          // fall through
          case 126: break;
          case 41:
            { return GdTypes.LBSHIFT;
            }
          // fall through
          case 127: break;
          case 42:
            { return GdTypes.RBSHIFT;
            }
          // fall through
          case 128: break;
          case 43:
            { return GdTypes.AS;
            }
          // fall through
          case 129: break;
          case 44:
            { return GdTypes.IF;
            }
          // fall through
          case 130: break;
          case 45:
            { return GdTypes.IN;
            }
          // fall through
          case 131: break;
          case 46:
            { return GdTypes.IS;
            }
          // fall through
          case 132: break;
          case 47:
            { return GdTypes.OROR;
            }
          // fall through
          case 133: break;
          case 48:
            { return GdTypes.STRING_NAME;
            }
          // fall through
          case 134: break;
          case 49:
            { return GdTypes.NODE_PATH_LIT;
            }
          // fall through
          case 135: break;
          case 50:
            { return GdTypes.FOR;
            }
          // fall through
          case 136: break;
          case 51:
            { return GdTypes.GET;
            }
          // fall through
          case 137: break;
          case 52:
            { return GdTypes.INF;
            }
          // fall through
          case 138: break;
          case 53:
            { return GdTypes.NAN;
            }
          // fall through
          case 139: break;
          case 54:
            { return GdTypes.SET;
            }
          // fall through
          case 140: break;
          case 55:
            { return GdTypes.VAR;
            }
          // fall through
          case 141: break;
          case 56:
            { return GdTypes.ELIF;
            }
          // fall through
          case 142: break;
          case 57:
            { return GdTypes.ELSE;
            }
          // fall through
          case 143: break;
          case 58:
            { return GdTypes.ENUM;
            }
          // fall through
          case 144: break;
          case 59:
            { return GdTypes.FUNC;
            }
          // fall through
          case 145: break;
          case 60:
            { return GdTypes.NULL;
            }
          // fall through
          case 146: break;
          case 61:
            { return GdTypes.PASS;
            }
          // fall through
          case 147: break;
          case 62:
            { return GdTypes.SELF;
            }
          // fall through
          case 148: break;
          case 63:
            { return GdTypes.TRUE;
            }
          // fall through
          case 149: break;
          case 64:
            { return GdTypes.VOID;
            }
          // fall through
          case 150: break;
          case 65:
            { return GdTypes.AWAIT;
            }
          // fall through
          case 151: break;
          case 66:
            { return GdTypes.BREAK;
            }
          // fall through
          case 152: break;
          case 67:
            { return GdTypes.CLASS;
            }
          // fall through
          case 153: break;
          case 68:
            { return GdTypes.CONST;
            }
          // fall through
          case 154: break;
          case 69:
            { return GdTypes.FALSE;
            }
          // fall through
          case 155: break;
          case 70:
            { return GdTypes.MATCH;
            }
          // fall through
          case 156: break;
          case 71:
            { return GdTypes.SUPER;
            }
          // fall through
          case 157: break;
          case 72:
            { return GdTypes.WHILE;
            }
          // fall through
          case 158: break;
          case 73:
            { return GdTypes.MASTER;
            }
          // fall through
          case 159: break;
          case 74:
            { return GdTypes.PUPPET;
            }
          // fall through
          case 160: break;
          case 75:
            { return GdTypes.REMOTE;
            }
          // fall through
          case 161: break;
          case 76:
            { return GdTypes.RETURN;
            }
          // fall through
          case 162: break;
          case 77:
            { return GdTypes.SIGNAL;
            }
          // fall through
          case 163: break;
          case 78:
            { return GdTypes.STATIC;
            }
          // fall through
          case 164: break;
          case 79:
            { return GdTypes.VARARG;
            }
          // fall through
          case 165: break;
          case 80:
            { return GdTypes.EXTENDS;
            }
          // fall through
          case 166: break;
          case 81:
            { return GdTypes.CONTINUE;
            }
          // fall through
          case 167: break;
          case 82:
            { return GdTypes.BREAKPOINT;
            }
          // fall through
          case 168: break;
          case 83:
            { return GdTypes.CLASS_NAME;
            }
          // fall through
          case 169: break;
          case 84:
            { return GdTypes.MASTERSYNC;
            }
          // fall through
          case 170: break;
          case 85:
            { return GdTypes.PUPPETSYNC;
            }
          // fall through
          case 171: break;
          case 86:
            { return GdTypes.REMOTESYNC;
            }
          // fall through
          case 172: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
