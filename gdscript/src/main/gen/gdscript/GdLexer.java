// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: src/main/kotlin/gdscript/Gd.flex

/*
------------------------------------------------------------------------------
  GDSCRIPT INDENTATION & NESTING RULES
  ------------------------------------

  This lexer must handle indentation-sensitive syntax with nested regions
  where indentation is temporarily ignored or reactivated.

  State variables:
    int paren_depth;           // count of (, [, {
    bool indent_active;        // whether indentation affects NEWLINE
    stack<int> indent_stack;   // indentation levels
    stack<bool> react_stack;   // previous indent_active states (for reactivation)

------------------------------------------------------------------------------
  NEWLINE HANDLING
  ----------------
  - On each NEWLINE:
      if (indent_active && paren_depth == 0):
          compare current indentation to top(indent_stack)
          emit INDENT or one/more DEDENT tokens accordingly
      else:
          ignore indentation (leading spaces are insignificant)

------------------------------------------------------------------------------
  PARENTHESIS CONTROL
  -------------------
  - On '(', '[', '{'  → paren_depth++
  - On ')', ']', '}'  → paren_depth--
  - When paren_depth > 0 → indentation normally disabled
  - When paren_depth == 0 → indentation enabled (unless overridden)

------------------------------------------------------------------------------
  COLON BEHAVIOR
  --------------
  After ':' :
    - If next token is NEWLINE:
        // block suite
        enable indentation (indent_active = true)
        on next line, emit INDENT if deeper
    - Else:
        // inline suite
        no INDENT/DEDENT emitted

------------------------------------------------------------------------------
  INDENTATION REACTIVATION INSIDE PARENS
  --------------------------------------
  - If inside parentheses (paren_depth > 0)
    and ':' followed by NEWLINE occurs after a block-forming keyword
    (func, if, elif, else, for, while, match):
        push current indent_active to the react_stack
        set indent_active = true
  - On `return` keyword or dedent back to the outer level:
        restore indent_active from react_stack (usually false)
  - When block is interrupted with closing of the parentheses symbol:
    close block with NEWLINE,
    INDENT, DEDENT before closing parentheses to let it be placed exactly on the level of its start

------------------------------------------------------------------------------
  EXAMPLES
  --------
  func a():
      print(
          func():
              if x:
                  pass)            // Lexer should close the nested blocks with NEWLINE and DEDENTS before the closing bracket
  func a():
      print(
          func():
              if x:
                  pass             // Lexer should close the nested blocks
                  )                // ignore indents
  func a():
      print(
          func():
              if x:
                  pass
      )                            // expected result
------------------------------------------------------------------------------
*/

package gdscript;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import gdscript.psi.GdTokenType;
import gdscript.psi.GdTypes;
import java.util.Stack;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import gdscript.lexer.ParenTracker;


class GdLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CREATE_INDENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\10\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\4\40\1\41\1\40\24\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\42\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\42\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\2\42\1\77\1\100\1\101\1\102"+
    "\6\0\1\3\u01a2\0\2\3\326\0\u0100\103";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\2\22\1\23\1\24\1\25\1\26"+
    "\1\25\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\20\31\1\40\1\41\1\42\1\43\11\44"+
    "\1\45\1\46\1\25\1\0\1\11\2\0\1\47\1\0"+
    "\1\50\1\0\1\51\1\0\1\11\1\0\1\52\1\53"+
    "\1\54\1\55\1\56\1\22\3\0\1\57\1\60\1\61"+
    "\1\0\1\31\1\62\13\31\1\63\1\64\1\65\4\31"+
    "\1\66\1\31\2\11\11\31\11\44\2\0\1\11\1\0"+
    "\1\47\1\67\2\0\2\11\1\70\1\0\3\22\1\71"+
    "\1\0\1\51\11\31\1\72\1\31\1\73\1\74\1\31"+
    "\1\75\1\4\4\31\1\76\4\31\1\77\2\31\10\44"+
    "\7\0\1\11\1\0\5\31\1\100\1\101\1\102\2\31"+
    "\1\103\1\31\1\104\1\105\1\31\1\106\3\31\1\107"+
    "\1\31\1\110\1\31\5\44\2\0\1\11\2\0\1\71"+
    "\1\111\1\112\1\113\1\114\2\31\1\115\1\116\3\31"+
    "\1\117\1\31\1\120\2\44\1\0\4\31\1\121\1\122"+
    "\1\123\1\124\1\11\3\31\1\125\2\31\1\126\2\31"+
    "\1\127\1\130";

  private static int [] zzUnpackAction() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\210\0\u0110\0\u0154\0\u0198"+
    "\0\u01dc\0\u0220\0\u0264\0\u02a8\0\210\0\210\0\u02ec\0\u0330"+
    "\0\210\0\u0374\0\u03b8\0\u03fc\0\u0440\0\u0484\0\u04c8\0\210"+
    "\0\u050c\0\u0110\0\u0550\0\210\0\u0594\0\u05d8\0\210\0\210"+
    "\0\210\0\u061c\0\u05d8\0\210\0\u0660\0\u06a4\0\u06e8\0\u072c"+
    "\0\u0770\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c"+
    "\0\u0990\0\u09d4\0\u0a18\0\u0a5c\0\210\0\u0aa0\0\210\0\210"+
    "\0\u0ae4\0\u0b28\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0"+
    "\0\u0d04\0\210\0\210\0\210\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14"+
    "\0\u0e58\0\u0e9c\0\210\0\u0ee0\0\210\0\u0f24\0\210\0\u0f68"+
    "\0\u03fc\0\210\0\210\0\210\0\u0fac\0\u0ff0\0\u1034\0\u1078"+
    "\0\u10bc\0\210\0\u03fc\0\u03fc\0\u1100\0\u1144\0\u05d8\0\u1188"+
    "\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8"+
    "\0\u13ec\0\u1430\0\u05d8\0\u1474\0\u05d8\0\u14b8\0\u14fc\0\u1540"+
    "\0\u1584\0\u05d8\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c"+
    "\0\u1760\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c"+
    "\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c"+
    "\0\u1ba0\0\u0d48\0\u1be4\0\210\0\210\0\u1c28\0\u1c6c\0\u1cb0"+
    "\0\u1cf4\0\210\0\u1d38\0\u1d7c\0\u1078\0\u10bc\0\210\0\u1dc0"+
    "\0\u05d8\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c"+
    "\0\u1fe0\0\u2024\0\u05d8\0\u2068\0\u05d8\0\u05d8\0\u20ac\0\u05d8"+
    "\0\u05d8\0\u20f0\0\u2134\0\u2178\0\u21bc\0\u05d8\0\u2200\0\u2244"+
    "\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc\0\u2420\0\u2464"+
    "\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u25b8\0\u25fc\0\u2640\0\u2684"+
    "\0\u26c8\0\u270c\0\u2750\0\u2794\0\u1100\0\u27d8\0\u281c\0\u2860"+
    "\0\u28a4\0\u28e8\0\u292c\0\u05d8\0\u05d8\0\u05d8\0\u2970\0\u29b4"+
    "\0\u05d8\0\u29f8\0\u05d8\0\u05d8\0\u2a3c\0\u05d8\0\u2a80\0\u2ac4"+
    "\0\u2b08\0\u05d8\0\u2b4c\0\u05d8\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c"+
    "\0\u2ca0\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\u2e38\0\u0d48"+
    "\0\u05d8\0\u2e7c\0\u2ec0\0\u05d8\0\u2f04\0\u2f48\0\u05d8\0\u05d8"+
    "\0\u2f8c\0\u2fd0\0\u3014\0\u05d8\0\u3058\0\u05d8\0\u309c\0\u30e0"+
    "\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u3234\0\u05d8\0\u05d8\0\u05d8"+
    "\0\u05d8\0\u2d28\0\u3278\0\u32bc\0\u3300\0\u05d8\0\u3344\0\u3388"+
    "\0\u05d8\0\u33cc\0\u3410\0\u05d8\0\u05d8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\2\3\1\5\1\4\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\2\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\3\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\36\1\50\1\51\1\52\1\36\1\53\2\36\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\36\1\63"+
    "\1\64\1\36\1\65\1\66\1\67\1\70\1\3\1\71"+
    "\1\72\1\5\2\3\1\5\1\72\1\71\1\73\1\74"+
    "\1\75\1\71\1\76\1\77\30\71\1\100\21\71\1\101"+
    "\12\71\1\3\105\0\1\4\1\102\2\0\1\102\1\4"+
    "\2\0\1\103\126\0\1\104\47\0\2\105\1\0\2\105"+
    "\1\0\2\105\1\106\33\105\1\107\37\105\2\10\1\0"+
    "\2\10\1\0\76\10\10\0\1\110\2\0\1\111\11\0"+
    "\4\111\7\0\3\111\4\0\1\111\1\0\26\111\15\0"+
    "\1\112\2\0\1\111\11\0\4\111\3\0\1\113\3\0"+
    "\3\111\4\0\1\111\1\0\26\111\15\0\1\114\3\0"+
    "\1\115\1\116\16\0\1\113\47\0\2\14\1\0\2\14"+
    "\1\0\7\14\1\117\26\14\1\120\37\14\20\0\1\121"+
    "\13\0\1\113\70\0\1\122\12\0\1\113\72\0\1\123"+
    "\10\0\1\113\1\124\72\0\1\125\1\0\3\126\107\0"+
    "\1\113\73\0\1\126\1\0\3\26\10\0\1\127\5\0"+
    "\1\26\2\0\1\130\2\0\1\127\20\0\1\131\31\0"+
    "\1\126\1\0\3\26\10\0\1\127\5\0\1\26\5\0"+
    "\1\127\62\0\1\132\102\0\1\133\1\104\103\0\1\104"+
    "\1\134\74\0\3\35\7\0\3\35\4\0\1\35\1\0"+
    "\26\35\33\0\3\36\7\0\3\36\4\0\1\36\1\0"+
    "\26\36\1\0\1\36\13\0\1\135\23\0\1\113\75\0"+
    "\3\36\7\0\3\36\4\0\1\36\1\0\14\36\1\136"+
    "\3\36\1\137\3\36\1\140\1\36\1\0\1\36\31\0"+
    "\3\36\7\0\3\36\4\0\1\36\1\0\17\36\1\141"+
    "\6\36\1\0\1\36\31\0\3\36\7\0\3\36\4\0"+
    "\1\36\1\0\12\36\1\142\2\36\1\143\10\36\1\0"+
    "\1\36\31\0\3\36\7\0\3\36\4\0\1\36\1\0"+
    "\12\36\1\144\1\36\1\145\10\36\1\146\1\0\1\36"+
    "\31\0\3\36\7\0\3\36\4\0\1\36\1\0\1\147"+
    "\14\36\1\150\4\36\1\151\3\36\1\0\1\36\31\0"+
    "\3\36\7\0\3\36\4\0\1\36\1\0\4\36\1\152"+
    "\21\36\1\0\1\36\31\0\3\36\7\0\3\36\4\0"+
    "\1\36\1\0\5\36\1\153\6\36\1\154\3\36\1\155"+
    "\5\36\1\0\1\36\31\0\3\36\7\0\3\36\4\0"+
    "\1\36\1\0\1\156\25\36\1\0\1\36\31\0\3\36"+
    "\7\0\3\36\4\0\1\36\1\0\1\157\14\36\1\160"+
    "\4\36\1\161\3\36\1\0\1\36\31\0\3\36\7\0"+
    "\3\36\4\0\1\36\1\0\17\36\1\162\6\36\1\0"+
    "\1\36\31\0\3\36\7\0\3\36\4\0\1\36\1\0"+
    "\1\163\25\36\1\0\1\36\13\0\1\164\4\0\1\165"+
    "\10\0\3\36\7\0\3\36\4\0\1\36\1\0\4\36"+
    "\1\166\21\36\1\0\1\36\31\0\3\36\7\0\3\36"+
    "\4\0\1\36\1\0\4\36\1\167\3\36\1\170\10\36"+
    "\1\171\1\172\3\36\1\0\1\36\31\0\3\36\7\0"+
    "\3\36\4\0\1\36\1\0\17\36\1\173\6\36\1\0"+
    "\1\36\31\0\3\36\7\0\3\36\4\0\1\36\1\0"+
    "\1\174\14\36\1\175\10\36\1\0\1\36\31\0\3\36"+
    "\7\0\3\36\4\0\1\36\1\0\7\36\1\176\16\36"+
    "\1\0\1\36\31\0\3\36\3\0\1\113\3\0\3\36"+
    "\4\0\1\36\1\0\26\36\1\0\1\162\3\0\2\71"+
    "\4\0\75\71\1\0\1\71\1\72\1\102\2\0\1\102"+
    "\1\72\74\71\1\0\2\177\1\0\2\105\1\0\2\177"+
    "\1\200\33\177\1\201\36\177\1\105\2\74\1\0\2\10"+
    "\1\0\75\74\1\10\2\71\4\0\2\71\1\177\72\71"+
    "\1\0\2\71\4\0\2\71\1\202\4\71\1\203\65\71"+
    "\1\0\2\77\1\0\2\14\1\0\7\77\1\71\26\77"+
    "\1\204\36\77\1\14\2\71\4\0\2\71\1\205\72\71"+
    "\1\0\2\71\4\0\2\71\1\206\4\71\1\207\65\71"+
    "\1\0\2\105\1\0\2\105\1\0\2\105\1\117\33\105"+
    "\1\107\37\105\10\0\1\210\73\0\1\105\1\211\2\105"+
    "\1\211\1\105\1\211\1\105\1\212\33\105\1\213\41\105"+
    "\1\0\2\105\1\0\1\110\1\105\1\214\2\105\1\110"+
    "\10\105\6\110\6\105\3\110\1\105\1\107\2\105\1\110"+
    "\1\105\26\110\5\105\13\0\1\111\11\0\4\111\7\0"+
    "\3\111\4\0\1\111\1\0\26\111\13\0\1\112\1\0"+
    "\1\214\2\0\1\112\10\0\6\112\6\0\3\112\4\0"+
    "\1\112\1\0\26\112\5\0\2\114\1\0\2\114\1\0"+
    "\2\114\1\215\33\114\1\216\37\114\2\116\1\0\2\116"+
    "\1\0\7\116\1\215\26\116\1\217\37\116\1\14\1\220"+
    "\2\14\1\220\1\14\1\220\35\14\1\221\37\14\24\0"+
    "\1\222\105\0\3\126\10\0\1\127\5\0\1\126\5\0"+
    "\1\127\47\0\1\223\1\0\1\223\2\0\3\224\101\0"+
    "\2\225\17\0\1\225\62\0\3\226\7\0\2\226\5\0"+
    "\1\226\1\0\6\226\25\0\2\135\1\0\2\135\1\0"+
    "\1\105\1\135\1\227\33\135\1\230\37\135\26\0\3\36"+
    "\7\0\3\36\4\0\1\36\1\0\3\36\1\231\22\36"+
    "\1\0\1\36\31\0\3\36\7\0\3\36\4\0\1\36"+
    "\1\0\1\232\25\36\1\0\1\36\31\0\3\36\7\0"+
    "\3\36\4\0\1\36\1\0\4\36\1\233\21\36\1\0"+
    "\1\36\31\0\3\36\7\0\3\36\4\0\1\36\1\0"+
    "\1\234\25\36\1\0\1\36\31\0\3\36\7\0\3\36"+
    "\4\0\1\36\1\0\14\36\1\235\11\36\1\0\1\36"+
    "\31\0\3\36\7\0\3\36\4\0\1\36\1\0\10\36"+
    "\1\236\7\36\1\237\5\36\1\0\1\36\31\0\3\36"+
    "\7\0\3\36\4\0\1\36\1\0\22\36\1\240\3\36"+
    "\1\0\1\36\31\0\3\36\7\0\3\36\4\0\1\36"+
    "\1\0\21\36\1\241\4\36\1\0\1\36\31\0\3\36"+
    "\7\0\3\36\4\0\1\36\1\0\12\36\1\242\13\36"+
    "\1\0\1\36\31\0\3\36\7\0\3\36\4\0\1\36"+
    "\1\0\17\36\1\243\6\36\1\0\1\36\31\0\3\36"+
    "\7\0\3\36\4\0\1\36\1\0\14\36\1\244\11\36"+
    "\1\0\1\36\31\0\3\36\7\0\3\36\4\0\1\36"+
    "\1\0\21\36\1\245\4\36\1\0\1\36\31\0\3\36"+
    "\7\0\3\36\4\0\1\36\1\0\5\36\1\246\20\36"+
    "\1\0\1\36\31\0\3\36\7\0\3\36\4\0\1\36"+
    "\1\0\21\36\1\247\4\36\1\0\1\36\31\0\3\36"+
    "\7\0\3\36\4\0\1\36\1\0\14\36\1\250\11\36"+
    "\1\0\1\36\31\0\3\36\7\0\3\36\4\0\1\36"+
    "\1\0\21\36\1\251\4\36\1\0\1\36\31\0\3\36"+
    "\7\0\3\36\4\0\1\36\1\0\12\36\1\252\13\36"+
    "\1\0\1\36\31\0\3\36\7\0\3\36\4\0\1\36"+
    "\1\0\20\36\1\253\5\36\1\0\1\36\3\0\2\164"+
    "\1\0\2\164\1\0\2\164\1\117\73\164\2\165\1\0"+
    "\2\165\1\0\7\165\1\117\66\165\26\0\3\36\7\0"+
    "\3\36\4\0\1\36\1\0\21\36\1\254\4\36\1\0"+
    "\1\36\31\0\3\36\7\0\3\36\4\0\1\36\1\0"+
    "\12\36\1\255\6\36\1\256\4\36\1\0\1\36\31\0"+
    "\3\36\7\0\3\36\4\0\1\36\1\0\6\36\1\257"+
    "\17\36\1\0\1\36\31\0\3\36\7\0\3\36\4\0"+
    "\1\36\1\0\1\260\25\36\1\0\1\36\31\0\3\36"+
    "\7\0\3\36\4\0\1\36\1\0\16\36\1\261\7\36"+
    "\1\0\1\36\31\0\3\36\7\0\3\36\4\0\1\36"+
    "\1\0\22\36\1\262\3\36\1\0\1\36\31\0\3\36"+
    "\7\0\3\36\4\0\1\36\1\0\17\36\1\263\6\36"+
    "\1\0\1\36\31\0\3\36\7\0\3\36\4\0\1\36"+
    "\1\0\10\36\1\264\15\36\1\0\1\36\31\0\3\36"+
    "\7\0\3\36\4\0\1\36\1\0\10\36\1\265\15\36"+
    "\1\0\1\36\3\0\2\177\1\0\2\105\1\0\2\177"+
    "\1\71\33\177\1\201\36\177\1\105\2\71\4\0\2\71"+
    "\1\266\72\71\1\0\1\177\1\267\2\105\1\211\1\105"+
    "\1\267\35\177\1\270\36\177\1\105\2\202\1\0\2\114"+
    "\1\0\2\202\1\71\33\202\1\271\36\202\1\114\2\203"+
    "\1\0\2\116\1\0\7\203\1\71\26\203\1\272\36\203"+
    "\1\116\1\77\1\273\2\14\1\220\1\14\1\273\35\77"+
    "\1\274\36\77\1\14\2\205\1\0\2\135\1\0\1\177"+
    "\1\205\1\71\33\205\1\275\36\205\1\135\2\206\1\0"+
    "\2\164\1\0\2\206\1\71\72\206\1\164\2\207\1\0"+
    "\2\165\1\0\7\207\1\71\65\207\1\165\10\210\1\276"+
    "\33\210\1\277\37\210\1\105\1\211\2\105\1\211\1\105"+
    "\1\211\1\105\1\117\33\105\1\213\40\105\4\211\1\300"+
    "\1\211\1\105\1\212\33\105\1\213\37\105\2\114\4\0"+
    "\75\114\1\0\2\116\4\0\75\116\1\0\1\14\1\220"+
    "\2\14\1\220\1\14\1\220\6\14\1\117\26\14\1\301"+
    "\41\14\1\302\2\220\1\303\7\14\1\117\26\14\1\120"+
    "\37\14\26\0\3\224\101\0\3\224\16\0\1\224\34\0"+
    "\1\135\1\304\2\105\1\211\1\105\1\304\1\135\1\305"+
    "\33\135\1\306\36\135\1\105\26\0\3\36\7\0\3\36"+
    "\4\0\1\36\1\0\10\36\1\307\15\36\1\0\1\36"+
    "\31\0\3\36\7\0\3\36\4\0\1\36\1\0\1\310"+
    "\25\36\1\0\1\36\31\0\3\36\7\0\3\36\4\0"+
    "\1\36\1\0\20\36\1\311\5\36\1\0\1\36\31\0"+
    "\3\36\7\0\3\36\4\0\1\36\1\0\20\36\1\312"+
    "\1\313\4\36\1\0\1\36\31\0\3\36\7\0\3\36"+
    "\4\0\1\36\1\0\5\36\1\314\20\36\1\0\1\36"+
    "\31\0\3\36\7\0\3\36\4\0\1\36\1\0\4\36"+
    "\1\315\21\36\1\0\1\36\31\0\3\36\7\0\3\36"+
    "\4\0\1\36\1\0\13\36\1\316\12\36\1\0\1\36"+
    "\31\0\3\36\7\0\3\36\4\0\1\36\1\0\4\36"+
    "\1\317\21\36\1\0\1\36\31\0\3\36\7\0\3\36"+
    "\4\0\1\36\1\0\20\36\1\320\5\36\1\0\1\36"+
    "\31\0\3\36\7\0\3\36\4\0\1\36\1\0\2\36"+
    "\1\321\23\36\1\0\1\36\31\0\3\36\7\0\3\36"+
    "\4\0\1\36\1\0\2\36\1\322\23\36\1\0\1\36"+
    "\31\0\3\36\7\0\3\36\4\0\1\36\1\0\12\36"+
    "\1\323\13\36\1\0\1\36\31\0\3\36\7\0\3\36"+
    "\4\0\1\36\1\0\20\36\1\324\5\36\1\0\1\36"+
    "\31\0\3\36\7\0\3\36\4\0\1\36\1\0\22\36"+
    "\1\325\3\36\1\0\1\36\31\0\3\36\7\0\3\36"+
    "\4\0\1\36\1\0\5\36\1\326\20\36\1\0\1\36"+
    "\31\0\3\36\7\0\3\36\4\0\1\36\1\0\14\36"+
    "\1\327\11\36\1\0\1\36\31\0\3\36\7\0\3\36"+
    "\4\0\1\36\1\0\21\36\1\330\4\36\1\0\1\36"+
    "\31\0\3\36\7\0\3\36\4\0\1\36\1\0\4\36"+
    "\1\331\21\36\1\0\1\36\31\0\3\36\7\0\3\36"+
    "\4\0\1\36\1\0\4\36\1\332\21\36\1\0\1\36"+
    "\31\0\3\36\7\0\3\36\4\0\1\36\1\0\1\333"+
    "\25\36\1\0\1\36\31\0\3\36\7\0\3\36\4\0"+
    "\1\36\1\0\3\36\1\334\22\36\1\0\1\36\31\0"+
    "\3\36\7\0\3\36\4\0\1\36\1\0\12\36\1\335"+
    "\13\36\1\0\1\36\3\0\2\266\4\210\2\266\1\336"+
    "\33\266\1\337\36\266\1\210\1\177\1\267\2\105\1\211"+
    "\1\105\1\267\1\177\1\71\33\177\1\270\36\177\1\105"+
    "\1\177\1\267\3\211\1\300\1\267\35\177\1\270\36\177"+
    "\1\105\2\202\4\0\75\202\1\0\2\203\4\0\75\203"+
    "\1\0\1\77\1\273\2\14\1\220\1\14\1\273\6\77"+
    "\1\71\26\77\1\340\36\77\1\14\2\77\1\302\2\220"+
    "\1\303\7\77\1\71\26\77\1\204\36\77\1\14\1\205"+
    "\1\341\2\105\1\211\1\105\1\341\35\205\1\342\36\205"+
    "\1\105\10\210\1\343\1\210\1\0\31\210\1\0\47\210"+
    "\1\344\33\210\1\277\37\210\1\105\2\211\1\105\1\211"+
    "\1\105\1\211\1\105\1\117\33\105\1\213\37\105\1\14"+
    "\4\220\1\345\1\220\35\14\1\221\37\14\1\0\1\302"+
    "\1\14\1\0\1\302\1\14\1\302\35\0\1\346\40\0"+
    "\1\302\1\220\1\0\1\302\1\14\1\302\35\0\1\346"+
    "\37\0\1\135\1\304\1\105\1\135\1\304\1\105\1\211"+
    "\1\135\1\227\33\135\1\347\40\135\1\304\1\211\2\304"+
    "\1\300\1\211\1\135\1\350\33\135\1\347\37\135\26\0"+
    "\3\36\7\0\3\36\4\0\1\36\1\0\21\36\1\351"+
    "\4\36\1\0\1\36\31\0\3\36\7\0\3\36\4\0"+
    "\1\36\1\0\11\36\1\352\14\36\1\0\1\36\31\0"+
    "\3\36\7\0\3\36\4\0\1\36\1\0\20\36\1\353"+
    "\5\36\1\0\1\36\31\0\3\36\7\0\3\36\4\0"+
    "\1\36\1\0\21\36\1\354\4\36\1\0\1\36\31\0"+
    "\3\36\7\0\3\36\4\0\1\36\1\0\10\36\1\355"+
    "\15\36\1\0\1\36\31\0\3\36\7\0\3\36\4\0"+
    "\1\36\1\0\14\36\1\356\11\36\1\0\1\36\31\0"+
    "\3\36\7\0\3\36\4\0\1\36\1\0\4\36\1\357"+
    "\21\36\1\0\1\36\31\0\3\36\7\0\3\36\4\0"+
    "\1\36\1\0\7\36\1\360\16\36\1\0\1\36\31\0"+
    "\3\36\7\0\3\36\4\0\1\36\1\0\17\36\1\361"+
    "\6\36\1\0\1\36\31\0\3\36\7\0\3\36\4\0"+
    "\1\36\1\0\1\362\25\36\1\0\1\36\31\0\3\36"+
    "\7\0\3\36\4\0\1\36\1\0\10\36\1\363\15\36"+
    "\1\0\1\36\31\0\3\36\7\0\3\36\4\0\1\36"+
    "\1\0\17\36\1\364\6\36\1\0\1\36\31\0\3\36"+
    "\7\0\3\36\4\0\1\36\1\0\17\36\1\365\6\36"+
    "\1\0\1\36\31\0\3\36\7\0\3\36\4\0\1\36"+
    "\1\0\4\36\1\366\21\36\1\0\1\36\3\0\2\266"+
    "\4\210\2\266\1\367\1\266\1\71\31\266\1\71\36\266"+
    "\1\210\2\266\4\210\36\266\1\337\36\266\1\210\1\77"+
    "\1\273\3\220\1\345\1\273\35\77\1\274\36\77\1\14"+
    "\1\205\1\341\1\105\1\135\1\304\1\105\1\267\1\205"+
    "\1\71\33\205\1\370\36\205\1\135\1\205\1\341\1\211"+
    "\2\304\1\300\1\267\1\205\1\177\33\205\1\370\36\205"+
    "\1\135\10\210\1\117\1\210\1\0\31\210\1\0\47\210"+
    "\1\371\33\210\1\277\37\210\1\14\2\220\1\14\1\220"+
    "\1\14\1\220\6\14\1\117\26\14\1\301\37\14\2\0"+
    "\3\302\1\303\76\0\1\135\1\304\3\211\1\300\1\304"+
    "\1\135\1\305\33\135\1\306\36\135\1\105\26\0\3\36"+
    "\7\0\3\36\4\0\1\36\1\0\16\36\1\372\7\36"+
    "\1\0\1\36\31\0\3\36\7\0\3\36\4\0\1\373"+
    "\1\0\26\36\1\0\1\36\31\0\3\36\7\0\3\36"+
    "\4\0\1\36\1\0\14\36\1\374\11\36\1\0\1\36"+
    "\31\0\3\36\7\0\3\36\4\0\1\36\1\0\3\36"+
    "\1\375\22\36\1\0\1\36\31\0\3\36\7\0\3\36"+
    "\4\0\1\36\1\0\14\36\1\376\11\36\1\0\1\36"+
    "\31\0\3\36\7\0\3\36\4\0\1\36\1\0\12\36"+
    "\1\377\13\36\1\0\1\36\31\0\3\36\7\0\3\36"+
    "\4\0\1\36\1\0\2\36\1\u0100\23\36\1\0\1\36"+
    "\31\0\3\36\7\0\3\36\4\0\1\36\1\0\6\36"+
    "\1\u0101\17\36\1\0\1\36\3\0\2\266\4\210\2\266"+
    "\1\71\1\266\1\71\31\266\1\71\36\266\1\210\1\205"+
    "\1\341\3\211\1\300\1\341\35\205\1\342\36\205\1\105"+
    "\10\210\1\u0102\1\210\1\0\31\210\1\0\37\210\26\0"+
    "\3\36\7\0\3\36\4\0\1\36\1\0\15\36\1\u0103"+
    "\10\36\1\0\1\36\31\0\3\36\7\0\3\36\4\0"+
    "\1\36\1\0\14\36\1\u0104\11\36\1\0\1\36\31\0"+
    "\3\36\7\0\3\36\4\0\1\36\1\0\22\36\1\u0105"+
    "\3\36\1\0\1\36\31\0\3\36\7\0\3\36\4\0"+
    "\1\36\1\0\20\36\1\u0106\5\36\1\0\1\36\31\0"+
    "\3\36\7\0\3\36\4\0\1\36\1\0\10\36\1\u0107"+
    "\15\36\1\0\1\36\31\0\3\36\7\0\3\36\4\0"+
    "\1\36\1\0\1\u0108\25\36\1\0\1\36\31\0\3\36"+
    "\7\0\3\36\4\0\1\36\1\0\4\36\1\u0109\21\36"+
    "\1\0\1\36\31\0\3\36\7\0\3\36\4\0\1\36"+
    "\1\0\14\36\1\u010a\11\36\1\0\1\36\31\0\3\36"+
    "\7\0\3\36\4\0\1\36\1\0\13\36\1\u010b\12\36"+
    "\1\0\1\36\31\0\3\36\7\0\3\36\4\0\1\36"+
    "\1\0\21\36\1\u010c\4\36\1\0\1\36\31\0\3\36"+
    "\7\0\3\36\4\0\1\36\1\0\4\36\1\u010d\21\36"+
    "\1\0\1\36\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[13396];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\7\1\2\11\2\1\1\11"+
    "\6\1\1\11\3\1\1\11\2\1\3\11\2\1\1\11"+
    "\20\1\1\11\1\1\2\11\11\1\3\11\1\0\1\1"+
    "\2\0\1\1\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\1\3\11\2\1\3\0\1\11\2\1\1\0"+
    "\52\1\2\0\1\1\1\0\2\11\2\0\2\1\1\11"+
    "\1\0\3\1\1\11\1\0\45\1\7\0\1\1\1\0"+
    "\34\1\2\0\1\1\2\0\21\1\1\0\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[269];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    ParenTracker parens = new ParenTracker();
    int indent = 0;
    Stack<Integer> indentSizes = new Stack<>();
    boolean eofFinished = false;

    boolean newLineProcessed = false;
    boolean gotBackslash = false;

    int lambdaReactivateDepth = -1;
    // Tracks pending reactivation at the bracket depth where 'func' was seen
    int lambdaPendingDepth = -1;
    Pattern nextNonCommentIndentPattern = Pattern.compile("\\n([ |\\t]*)[^#\\s]");

    public IElementType dedentRoot(IElementType type) {
        newLineProcessed = false;
        if (isIgnored() || yycolumn > 0 || indent <= 0 || indentSizes.empty()) {
            return type;
        }

        dedent();
        yypushback(yylength());

        return GdTypes.DEDENT;
    }

    public boolean dedentSpaces() {
        newLineProcessed = false;
        if (indent <= 0 || indentSizes.empty()) { // For EOF rule
            return false;
        }

        dedent();
        yypushback(yylength());

        return true;
    }

    private int nextNonCommentIndent() {
        Matcher matcher = nextNonCommentIndentPattern.matcher(zzBuffer.subSequence(Math.min(zzBuffer.length(), zzCurrentPos+yylength()), zzBuffer.length()));
        if (matcher.find()) {
            return matcher.group(1).length();
        }

        return -1;
    }

    private IElementType dedentComment(IElementType type) {
        int nextIndent = nextNonCommentIndent();
        if (nextIndent < 0 || isIgnored() || indent <= 0 || indentSizes.empty() || indent <= nextIndent || !newLineProcessed) {
            return type;
        }

        dedent();
        yypushback(yylength());

        return GdTypes.DEDENT;
    }

    private void dedent() {
        indent = Math.max(0, indent - indentSizes.pop());
    }

    private boolean isIgnored() {
        if (parens.isTopLevel()) return false;
        // Inside parentheses, indentation is ignored unless reactivated at this depth
        return !(lambdaReactivateDepth == parens.getDepth());
    }

    private void onCloseParen() {
        parens.close();
        if (lambdaPendingDepth > parens.getDepth()) lambdaPendingDepth = -1;
        if (lambdaReactivateDepth > parens.getDepth()) lambdaReactivateDepth = -1;
    }

    private void markLambda() {
        if (parens.isNested()) {
            lambdaPendingDepth = parens.getDepth();
        }
    }

    private boolean nextCharIsNewline() {
        int start = Math.min(zzBuffer.length(), zzCurrentPos + yylength());
        if (start >= zzBuffer.length()) return false;
        char c = zzBuffer.charAt(start);
        if (c == '\r') return true; // handles \r and \r\n
        return c == '\n';
    }

    private void activateLambdaAfterColon() {
        // Reactivate indentation inside parentheses only for block suites,
        // i.e., when ':' is immediately followed by a newline.
        if (lambdaPendingDepth == parens.getDepth() && nextCharIsNewline()) {
            lambdaReactivateDepth = parens.getDepth();
        }
    }

    private void restoreLambdaOnReturn() {
        // When returning from a lambda defined inside parens with reactivated indentation,
        // stop treating NEW_LINE as significant at this bracket depth.
        if (parens.getDepth() > 0 && lambdaReactivateDepth == parens.getDepth()) {
            lambdaReactivateDepth = -1;
            // clear pending marker as well, we won't reactivate again for this lambda
            if (lambdaPendingDepth == parens.getDepth()) lambdaPendingDepth = -1;
        }
    }




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  GdLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                if (yycolumn > 0 && !eofFinished) {
        eofFinished = true;
        return GdTypes.NEW_LINE;
    }

    if (indentSizes.empty()) {
        return null;
    }

    indentSizes.pop();
    yypushback(yylength());
    return GdTypes.DEDENT;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 89: break;
          case 2:
            { if (yycolumn == 0 && !gotBackslash) {
            int spaces = yytext().length();
            if (spaces > indent) {
                if (isIgnored()) {
                    return TokenType.WHITE_SPACE;
                }

                indentSizes.push(spaces - indent);
                indent = spaces;

                return GdTypes.INDENT;
            } else if (indent > spaces) {
                dedentSpaces();
                return GdTypes.DEDENT;
            }
        }
        gotBackslash = false;

        return TokenType.WHITE_SPACE;
            }
          // fall through
          case 90: break;
          case 3:
            { if (yycolumn == 0) {
            return TokenType.WHITE_SPACE;
        } else if (isIgnored()) {
            return TokenType.WHITE_SPACE;
        }

        if (newLineProcessed) {
            return TokenType.WHITE_SPACE;
        }

        newLineProcessed = true;
        return GdTypes.NEW_LINE;
            }
          // fall through
          case 91: break;
          case 4:
            { return dedentRoot(GdTypes.NEGATE);
            }
          // fall through
          case 92: break;
          case 5:
            { return dedentComment(GdTypes.COMMENT);
            }
          // fall through
          case 93: break;
          case 6:
            { return dedentRoot(GdTypes.DOLLAR);
            }
          // fall through
          case 94: break;
          case 7:
            { return dedentRoot(GdTypes.MOD);
            }
          // fall through
          case 95: break;
          case 8:
            { return dedentRoot(GdTypes.AND);
            }
          // fall through
          case 96: break;
          case 9:
            { return dedentRoot(GdTypes.STRING);
            }
          // fall through
          case 97: break;
          case 10:
            { parens.open(); return dedentRoot(GdTypes.LRBR);
            }
          // fall through
          case 98: break;
          case 11:
            { onCloseParen(); return dedentRoot(GdTypes.RRBR);
            }
          // fall through
          case 99: break;
          case 12:
            { return dedentRoot(GdTypes.MUL);
            }
          // fall through
          case 100: break;
          case 13:
            { return dedentRoot(GdTypes.PLUS);
            }
          // fall through
          case 101: break;
          case 14:
            { return dedentRoot(GdTypes.COMMA);
            }
          // fall through
          case 102: break;
          case 15:
            { return dedentRoot(GdTypes.MINUS);
            }
          // fall through
          case 103: break;
          case 16:
            { return dedentRoot(GdTypes.DOT);
            }
          // fall through
          case 104: break;
          case 17:
            { return dedentRoot(GdTypes.DIV);
            }
          // fall through
          case 105: break;
          case 18:
            { return dedentRoot(GdTypes.NUMBER);
            }
          // fall through
          case 106: break;
          case 19:
            { activateLambdaAfterColon(); return dedentRoot(GdTypes.COLON);
            }
          // fall through
          case 107: break;
          case 20:
            { newLineProcessed = true; return GdTypes.SEMICON;
            }
          // fall through
          case 108: break;
          case 21:
            { return GdTypes.TEST_OPERATOR;
            }
          // fall through
          case 109: break;
          case 22:
            { return dedentRoot(GdTypes.EQ);
            }
          // fall through
          case 110: break;
          case 23:
            { return dedentRoot(GdTypes.QUESTION_MARK);
            }
          // fall through
          case 111: break;
          case 24:
            { return dedentRoot(GdTypes.ANNOTATOR);
            }
          // fall through
          case 112: break;
          case 25:
            { return dedentRoot(GdTypes.IDENTIFIER);
            }
          // fall through
          case 113: break;
          case 26:
            { parens.open(); return dedentRoot(GdTypes.LSBR);
            }
          // fall through
          case 114: break;
          case 27:
            { newLineProcessed = true; gotBackslash = true; return GdTypes.BACKSLASH;
            }
          // fall through
          case 115: break;
          case 28:
            { onCloseParen(); return dedentRoot(GdTypes.RSBR);
            }
          // fall through
          case 116: break;
          case 29:
            { return dedentRoot(GdTypes.XOR);
            }
          // fall through
          case 117: break;
          case 30:
            { return dedentRoot(GdTypes.UNDER);
            }
          // fall through
          case 118: break;
          case 31:
            { return dedentRoot(GdTypes.BACKTICK);
            }
          // fall through
          case 119: break;
          case 32:
            { parens.open(); return dedentRoot(GdTypes.LCBR);
            }
          // fall through
          case 120: break;
          case 33:
            { return dedentRoot(GdTypes.OR);
            }
          // fall through
          case 121: break;
          case 34:
            { onCloseParen(); return dedentRoot(GdTypes.RCBR);
            }
          // fall through
          case 122: break;
          case 35:
            { return dedentRoot(GdTypes.NOT);
            }
          // fall through
          case 123: break;
          case 36:
            { yybegin(YYINITIAL);
        yypushback(yylength());

        return GdTypes.INDENT;
            }
          // fall through
          case 124: break;
          case 37:
            { if (yycolumn > 0) { yypushback(1); } return TokenType.WHITE_SPACE;
            }
          // fall through
          case 125: break;
          case 38:
            { yypushback(1);
        if (yycolumn == 0) {
            newLineProcessed = true;
        }

        return TokenType.WHITE_SPACE;
            }
          // fall through
          case 126: break;
          case 39:
            { if (yytext().toString().startsWith("%\"")) {
              String preceeding = zzBufferL.toString().substring(Math.max(0, zzCurrentPos - 100), zzCurrentPos).trim();
              if (preceeding.length() > 1 && preceeding.charAt(preceeding.length() - 1) == '"') {
                  yypushback(yylength() - 1);
                  return dedentRoot(GdTypes.MOD);
              }
          }

          return dedentRoot(GdTypes.NODE_PATH_LEX);
            }
          // fall through
          case 127: break;
          case 40:
            { return GdTypes.ASSIGN;
            }
          // fall through
          case 128: break;
          case 41:
            { return dedentRoot(GdTypes.ANDAND);
            }
          // fall through
          case 129: break;
          case 42:
            { return dedentRoot(GdTypes.POWER);
            }
          // fall through
          case 130: break;
          case 43:
            { return dedentRoot(GdTypes.PPLUS);
            }
          // fall through
          case 131: break;
          case 44:
            { return dedentRoot(GdTypes.MMINUS);
            }
          // fall through
          case 132: break;
          case 45:
            { return dedentRoot(GdTypes.RET);
            }
          // fall through
          case 133: break;
          case 46:
            { return dedentRoot(GdTypes.DOTDOT);
            }
          // fall through
          case 134: break;
          case 47:
            { return dedentRoot(GdTypes.CEQ);
            }
          // fall through
          case 135: break;
          case 48:
            { return dedentRoot(GdTypes.LBSHIFT);
            }
          // fall through
          case 136: break;
          case 49:
            { return dedentRoot(GdTypes.RBSHIFT);
            }
          // fall through
          case 137: break;
          case 50:
            { return dedentRoot(GdTypes.AS);
            }
          // fall through
          case 138: break;
          case 51:
            { return dedentRoot(GdTypes.IF);
            }
          // fall through
          case 139: break;
          case 52:
            { return dedentRoot(GdTypes.IN);
            }
          // fall through
          case 140: break;
          case 53:
            { return dedentRoot(GdTypes.IS);
            }
          // fall through
          case 141: break;
          case 54:
            { return dedentRoot(GdTypes.OROR);
            }
          // fall through
          case 142: break;
          case 55:
            { return dedentRoot(GdTypes.STRING_NAME);
            }
          // fall through
          case 143: break;
          case 56:
            { return dedentRoot(GdTypes.DOTDOTDOT);
            }
          // fall through
          case 144: break;
          case 57:
            { return dedentRoot(GdTypes.NODE_PATH_LIT);
            }
          // fall through
          case 145: break;
          case 58:
            { return dedentRoot(GdTypes.FOR);
            }
          // fall through
          case 146: break;
          case 59:
            { return dedentRoot(GdTypes.GET);
            }
          // fall through
          case 147: break;
          case 60:
            { return dedentRoot(GdTypes.INF);
            }
          // fall through
          case 148: break;
          case 61:
            { return dedentRoot(GdTypes.NAN);
            }
          // fall through
          case 149: break;
          case 62:
            { return dedentRoot(GdTypes.SET);
            }
          // fall through
          case 150: break;
          case 63:
            { return dedentRoot(GdTypes.VAR);
            }
          // fall through
          case 151: break;
          case 64:
            { return dedentRoot(GdTypes.ELIF);
            }
          // fall through
          case 152: break;
          case 65:
            { return dedentRoot(GdTypes.ELSE);
            }
          // fall through
          case 153: break;
          case 66:
            { return dedentRoot(GdTypes.ENUM);
            }
          // fall through
          case 154: break;
          case 67:
            { markLambda(); return dedentRoot(GdTypes.FUNC);
            }
          // fall through
          case 155: break;
          case 68:
            { return dedentRoot(GdTypes.NULL);
            }
          // fall through
          case 156: break;
          case 69:
            { return dedentRoot(GdTypes.PASS);
            }
          // fall through
          case 157: break;
          case 70:
            { return dedentRoot(GdTypes.SELF);
            }
          // fall through
          case 158: break;
          case 71:
            { return dedentRoot(GdTypes.TRUE);
            }
          // fall through
          case 159: break;
          case 72:
            { return dedentRoot(GdTypes.VOID);
            }
          // fall through
          case 160: break;
          case 73:
            { return dedentRoot(GdTypes.AWAIT);
            }
          // fall through
          case 161: break;
          case 74:
            { return dedentRoot(GdTypes.BREAK);
            }
          // fall through
          case 162: break;
          case 75:
            { return dedentRoot(GdTypes.CLASS);
            }
          // fall through
          case 163: break;
          case 76:
            { return dedentRoot(GdTypes.CONST);
            }
          // fall through
          case 164: break;
          case 77:
            { return dedentRoot(GdTypes.FALSE);
            }
          // fall through
          case 165: break;
          case 78:
            { return dedentRoot(GdTypes.MATCH);
            }
          // fall through
          case 166: break;
          case 79:
            { return dedentRoot(GdTypes.SUPER);
            }
          // fall through
          case 167: break;
          case 80:
            { return dedentRoot(GdTypes.WHILE);
            }
          // fall through
          case 168: break;
          case 81:
            { restoreLambdaOnReturn(); return dedentRoot(GdTypes.RETURN);
            }
          // fall through
          case 169: break;
          case 82:
            { return dedentRoot(GdTypes.SIGNAL);
            }
          // fall through
          case 170: break;
          case 83:
            { return dedentRoot(GdTypes.STATIC);
            }
          // fall through
          case 171: break;
          case 84:
            { return dedentRoot(GdTypes.VARARG);
            }
          // fall through
          case 172: break;
          case 85:
            { return dedentRoot(GdTypes.EXTENDS);
            }
          // fall through
          case 173: break;
          case 86:
            { return dedentRoot(GdTypes.CONTINUE);
            }
          // fall through
          case 174: break;
          case 87:
            { return dedentRoot(GdTypes.BREAKPOINT);
            }
          // fall through
          case 175: break;
          case 88:
            { return dedentRoot(GdTypes.CLASS_NAME);
            }
          // fall through
          case 176: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
