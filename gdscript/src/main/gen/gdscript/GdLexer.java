// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Gd.flex

/*
------------------------------------------------------------------------------
  GDSCRIPT INDENTATION & NESTING RULES
  ------------------------------------

  This lexer must handle indentation-sensitive syntax with nested regions
  where indentation is temporarily ignored or reactivated.

  State variables:
    int paren_depth;           // count of (, [, {
    bool indent_active;        // whether indentation affects NEWLINE
    stack<int> indent_stack;   // indentation levels
    stack<bool> react_stack;   // previous indent_active states (for reactivation)

------------------------------------------------------------------------------
  NEWLINE HANDLING
  ----------------
  - On each NEWLINE:
      if (indent_active && paren_depth == 0):
          compare current indentation to top(indent_stack)
          emit INDENT or one/more DEDENT tokens accordingly
      else:
          ignore indentation (leading spaces are insignificant)

------------------------------------------------------------------------------
  PARENTHESIS CONTROL
  -------------------
  - On '(', '[', '{'  → paren_depth++
  - On ')', ']', '}'  → paren_depth--
  - When paren_depth > 0 → indentation normally disabled
  - When paren_depth == 0 → indentation enabled (unless overridden)

------------------------------------------------------------------------------
  COLON BEHAVIOR
  --------------
  After ':' :
    - If next token is NEWLINE:
        // block suite
        enable indentation (indent_active = true)
        on next line, emit INDENT if deeper
    - Else:
        // inline suite
        no INDENT/DEDENT emitted

------------------------------------------------------------------------------
  INDENTATION REACTIVATION INSIDE PARENS
  --------------------------------------
  - If inside parentheses (paren_depth > 0)
    and ':' followed by NEWLINE occurs after a block-forming keyword
    (func, if, elif, else, for, while, match):
        push current indent_active to react_stack
        set indent_active = true
  - When dedented back to outer level:
        restore indent_active from react_stack (usually false)

------------------------------------------------------------------------------
  DEDENTS
  -------
  - Emit DEDENTs only when indentation decreases on a NEWLINE
  - When closing ')' ']' '}' that ends a lambda block (indentation reactivated inside parens),
  - emit pending DEDENTs before returning the bracket token.
  - Normal parentheses (without reactivated indentation) still do NOT emit dedents.

------------------------------------------------------------------------------
  EXAMPLES
  --------
  func a():
      print(
          func(): pass)            // inline suite: no indent change

      print(
          func():
              if x:
                  pass)            // block suite: dedents before ')'
------------------------------------------------------------------------------
*/

package gdscript;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import gdscript.psi.GdTokenType;
import gdscript.psi.GdTypes;
import java.util.Stack;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


class GdLexer implements FlexLexer {
 /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CREATE_INDENT = 2;
  public static final int PENDING_DEDENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\10\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\4\40\1\41\1\40\24\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\42\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\42\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\2\42\1\77\1\100\1\101\1\102"+
    "\6\0\1\3\u01a2\0\2\3\326\0\u0100\103";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\2\22\1\23\1\24\1\25\1\26"+
    "\1\25\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\20\31\1\40\1\41\1\42\1\43\11\44"+
    "\11\45\1\46\1\47\1\25\1\0\1\11\2\0\1\50"+
    "\1\0\1\51\1\0\1\52\1\0\1\11\1\0\1\53"+
    "\1\54\1\55\1\56\1\57\1\22\3\0\1\60\1\61"+
    "\1\62\1\0\1\31\1\63\13\31\1\64\1\65\1\66"+
    "\4\31\1\67\1\31\2\11\11\31\11\44\11\45\2\0"+
    "\1\11\1\0\1\50\1\70\2\0\2\11\1\71\1\0"+
    "\3\22\1\72\1\0\1\52\11\31\1\73\1\31\1\74"+
    "\1\75\1\31\1\76\1\4\4\31\1\77\4\31\1\100"+
    "\2\31\10\44\10\45\7\0\1\11\1\0\5\31\1\101"+
    "\1\102\1\103\2\31\1\104\1\31\1\105\1\106\1\31"+
    "\1\107\3\31\1\110\1\31\1\111\1\31\5\44\5\45"+
    "\2\0\1\11\2\0\1\72\1\112\1\113\1\114\1\115"+
    "\2\31\1\116\1\117\3\31\1\120\1\31\1\121\2\44"+
    "\2\45\1\0\4\31\1\122\1\123\1\124\1\125\1\11"+
    "\3\31\1\126\2\31\1\127\2\31\1\130\1\131";

  private static int [] zzUnpackAction() {
    int [] result = new int[303];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\314\0\u0154\0\u0198"+
    "\0\u01dc\0\u0220\0\u0264\0\u02a8\0\u02ec\0\314\0\314\0\u0330"+
    "\0\u0374\0\314\0\u03b8\0\u03fc\0\u0440\0\u0484\0\u04c8\0\u050c"+
    "\0\314\0\u0550\0\u0154\0\u0594\0\314\0\u05d8\0\u061c\0\314"+
    "\0\314\0\314\0\u0660\0\u061c\0\314\0\u06a4\0\u06e8\0\u072c"+
    "\0\u0770\0\u07b4\0\u07f8\0\u083c\0\u0880\0\u08c4\0\u0908\0\u094c"+
    "\0\u0990\0\u09d4\0\u0a18\0\u0a5c\0\u0aa0\0\314\0\u0ae4\0\314"+
    "\0\314\0\u0b28\0\u0b6c\0\u0bb0\0\u0bf4\0\u0c38\0\u0c7c\0\u0cc0"+
    "\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u0e9c\0\u0ee0"+
    "\0\u0f24\0\u0f68\0\u0fac\0\314\0\314\0\314\0\u0ff0\0\u1034"+
    "\0\u1078\0\u10bc\0\u1100\0\u1144\0\314\0\u1188\0\314\0\u11cc"+
    "\0\314\0\u1210\0\u0440\0\314\0\314\0\314\0\u1254\0\u1298"+
    "\0\u12dc\0\u1320\0\u1364\0\314\0\u0440\0\u0440\0\u13a8\0\u13ec"+
    "\0\u061c\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540\0\u1584\0\u15c8"+
    "\0\u160c\0\u1650\0\u1694\0\u16d8\0\u061c\0\u171c\0\u061c\0\u1760"+
    "\0\u17a4\0\u17e8\0\u182c\0\u061c\0\u1870\0\u18b4\0\u18f8\0\u193c"+
    "\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c"+
    "\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c"+
    "\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c"+
    "\0\u1fe0\0\u2024\0\u2068\0\u20ac\0\u0ff0\0\u20f0\0\314\0\314"+
    "\0\u2134\0\u2178\0\u21bc\0\u2200\0\314\0\u2244\0\u2288\0\u1320"+
    "\0\u1364\0\314\0\u22cc\0\u061c\0\u2310\0\u2354\0\u2398\0\u23dc"+
    "\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u061c\0\u2574\0\u061c"+
    "\0\u061c\0\u25b8\0\u061c\0\u061c\0\u25fc\0\u2640\0\u2684\0\u26c8"+
    "\0\u061c\0\u270c\0\u2750\0\u2794\0\u27d8\0\u281c\0\u2860\0\u28a4"+
    "\0\u28e8\0\u292c\0\u2970\0\u29b4\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4"+
    "\0\u2b08\0\u2b4c\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0\0\u2ce4"+
    "\0\u2d28\0\u2d6c\0\u2db0\0\u2df4\0\u2e38\0\u2e7c\0\u2ec0\0\u13a8"+
    "\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0\0\u3014\0\u3058\0\u061c\0\u061c"+
    "\0\u061c\0\u309c\0\u30e0\0\u061c\0\u3124\0\u061c\0\u061c\0\u3168"+
    "\0\u061c\0\u31ac\0\u31f0\0\u3234\0\u061c\0\u3278\0\u061c\0\u32bc"+
    "\0\u3300\0\u3344\0\u3388\0\u33cc\0\u3410\0\u3454\0\u3498\0\u34dc"+
    "\0\u3520\0\u3564\0\u35a8\0\u35ec\0\u3630\0\u3674\0\u36b8\0\u0ff0"+
    "\0\u061c\0\u36fc\0\u3740\0\u061c\0\u3784\0\u37c8\0\u061c\0\u061c"+
    "\0\u380c\0\u3850\0\u3894\0\u061c\0\u38d8\0\u061c\0\u391c\0\u3960"+
    "\0\u39a4\0\u39e8\0\u3a2c\0\u3a70\0\u3ab4\0\u3af8\0\u3b3c\0\u061c"+
    "\0\u061c\0\u061c\0\u061c\0\u35a8\0\u3b80\0\u3bc4\0\u3c08\0\u061c"+
    "\0\u3c4c\0\u3c90\0\u061c\0\u3cd4\0\u3d18\0\u061c\0\u061c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[303];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\2\4\1\6\1\5\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\2\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\3\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\37\1\51\1\52\1\53\1\37\1\54\2\37\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\37\1\64"+
    "\1\65\1\37\1\66\1\67\1\70\1\71\1\4\1\72"+
    "\1\73\1\6\2\4\1\6\1\73\1\72\1\74\1\75"+
    "\1\76\1\72\1\77\1\100\30\72\1\101\21\72\1\102"+
    "\12\72\1\4\1\103\1\104\1\6\2\4\1\6\1\104"+
    "\1\103\1\105\1\106\1\107\1\103\1\110\1\111\30\103"+
    "\1\112\21\103\1\113\12\103\1\4\105\0\1\5\1\114"+
    "\2\0\1\114\1\5\2\0\1\115\126\0\1\116\47\0"+
    "\2\117\1\0\2\117\1\0\2\117\1\120\33\117\1\121"+
    "\37\117\2\11\1\0\2\11\1\0\76\11\10\0\1\122"+
    "\2\0\1\123\11\0\4\123\7\0\3\123\4\0\1\123"+
    "\1\0\26\123\15\0\1\124\2\0\1\123\11\0\4\123"+
    "\3\0\1\125\3\0\3\123\4\0\1\123\1\0\26\123"+
    "\15\0\1\126\3\0\1\127\1\130\16\0\1\125\47\0"+
    "\2\15\1\0\2\15\1\0\7\15\1\131\26\15\1\132"+
    "\37\15\20\0\1\133\13\0\1\125\70\0\1\134\12\0"+
    "\1\125\72\0\1\135\10\0\1\125\1\136\72\0\1\137"+
    "\1\0\3\140\107\0\1\125\73\0\1\140\1\0\3\27"+
    "\10\0\1\141\5\0\1\27\2\0\1\142\2\0\1\141"+
    "\20\0\1\143\31\0\1\140\1\0\3\27\10\0\1\141"+
    "\5\0\1\27\5\0\1\141\62\0\1\144\102\0\1\145"+
    "\1\116\103\0\1\116\1\146\74\0\3\36\7\0\3\36"+
    "\4\0\1\36\1\0\26\36\33\0\3\37\7\0\3\37"+
    "\4\0\1\37\1\0\26\37\1\0\1\37\13\0\1\147"+
    "\23\0\1\125\75\0\3\37\7\0\3\37\4\0\1\37"+
    "\1\0\14\37\1\150\3\37\1\151\3\37\1\152\1\37"+
    "\1\0\1\37\31\0\3\37\7\0\3\37\4\0\1\37"+
    "\1\0\17\37\1\153\6\37\1\0\1\37\31\0\3\37"+
    "\7\0\3\37\4\0\1\37\1\0\12\37\1\154\2\37"+
    "\1\155\10\37\1\0\1\37\31\0\3\37\7\0\3\37"+
    "\4\0\1\37\1\0\12\37\1\156\1\37\1\157\10\37"+
    "\1\160\1\0\1\37\31\0\3\37\7\0\3\37\4\0"+
    "\1\37\1\0\1\161\14\37\1\162\4\37\1\163\3\37"+
    "\1\0\1\37\31\0\3\37\7\0\3\37\4\0\1\37"+
    "\1\0\4\37\1\164\21\37\1\0\1\37\31\0\3\37"+
    "\7\0\3\37\4\0\1\37\1\0\5\37\1\165\6\37"+
    "\1\166\3\37\1\167\5\37\1\0\1\37\31\0\3\37"+
    "\7\0\3\37\4\0\1\37\1\0\1\170\25\37\1\0"+
    "\1\37\31\0\3\37\7\0\3\37\4\0\1\37\1\0"+
    "\1\171\14\37\1\172\4\37\1\173\3\37\1\0\1\37"+
    "\31\0\3\37\7\0\3\37\4\0\1\37\1\0\17\37"+
    "\1\174\6\37\1\0\1\37\31\0\3\37\7\0\3\37"+
    "\4\0\1\37\1\0\1\175\25\37\1\0\1\37\13\0"+
    "\1\176\4\0\1\177\10\0\3\37\7\0\3\37\4\0"+
    "\1\37\1\0\4\37\1\200\21\37\1\0\1\37\31\0"+
    "\3\37\7\0\3\37\4\0\1\37\1\0\4\37\1\201"+
    "\3\37\1\202\10\37\1\203\1\204\3\37\1\0\1\37"+
    "\31\0\3\37\7\0\3\37\4\0\1\37\1\0\17\37"+
    "\1\205\6\37\1\0\1\37\31\0\3\37\7\0\3\37"+
    "\4\0\1\37\1\0\1\206\14\37\1\207\10\37\1\0"+
    "\1\37\31\0\3\37\7\0\3\37\4\0\1\37\1\0"+
    "\7\37\1\210\16\37\1\0\1\37\31\0\3\37\3\0"+
    "\1\125\3\0\3\37\4\0\1\37\1\0\26\37\1\0"+
    "\1\174\3\0\2\72\4\0\75\72\1\0\1\72\1\73"+
    "\1\114\2\0\1\114\1\73\74\72\1\0\2\211\1\0"+
    "\2\117\1\0\2\211\1\212\33\211\1\213\36\211\1\117"+
    "\2\75\1\0\2\11\1\0\75\75\1\11\2\72\4\0"+
    "\2\72\1\211\72\72\1\0\2\72\4\0\2\72\1\214"+
    "\4\72\1\215\65\72\1\0\2\100\1\0\2\15\1\0"+
    "\7\100\1\72\26\100\1\216\36\100\1\15\2\72\4\0"+
    "\2\72\1\217\72\72\1\0\2\72\4\0\2\72\1\220"+
    "\4\72\1\221\65\72\1\0\2\103\4\0\75\103\1\0"+
    "\1\103\1\104\1\114\2\0\1\114\1\104\74\103\1\0"+
    "\2\222\1\0\2\117\1\0\2\222\1\223\33\222\1\224"+
    "\36\222\1\117\2\106\1\0\2\11\1\0\75\106\1\11"+
    "\2\103\4\0\2\103\1\222\72\103\1\0\2\103\4\0"+
    "\2\103\1\225\4\103\1\226\65\103\1\0\2\111\1\0"+
    "\2\15\1\0\7\111\1\103\26\111\1\227\36\111\1\15"+
    "\2\103\4\0\2\103\1\230\72\103\1\0\2\103\4\0"+
    "\2\103\1\231\4\103\1\232\65\103\1\0\2\117\1\0"+
    "\2\117\1\0\2\117\1\131\33\117\1\121\37\117\10\0"+
    "\1\233\73\0\1\117\1\234\2\117\1\234\1\117\1\234"+
    "\1\117\1\235\33\117\1\236\41\117\1\0\2\117\1\0"+
    "\1\122\1\117\1\237\2\117\1\122\10\117\6\122\6\117"+
    "\3\122\1\117\1\121\2\117\1\122\1\117\26\122\5\117"+
    "\13\0\1\123\11\0\4\123\7\0\3\123\4\0\1\123"+
    "\1\0\26\123\13\0\1\124\1\0\1\237\2\0\1\124"+
    "\10\0\6\124\6\0\3\124\4\0\1\124\1\0\26\124"+
    "\5\0\2\126\1\0\2\126\1\0\2\126\1\240\33\126"+
    "\1\241\37\126\2\130\1\0\2\130\1\0\7\130\1\240"+
    "\26\130\1\242\37\130\1\15\1\243\2\15\1\243\1\15"+
    "\1\243\35\15\1\244\37\15\24\0\1\245\105\0\3\140"+
    "\10\0\1\141\5\0\1\140\5\0\1\141\47\0\1\246"+
    "\1\0\1\246\2\0\3\247\101\0\2\250\17\0\1\250"+
    "\62\0\3\251\7\0\2\251\5\0\1\251\1\0\6\251"+
    "\25\0\2\147\1\0\2\147\1\0\1\117\1\147\1\252"+
    "\33\147\1\253\37\147\26\0\3\37\7\0\3\37\4\0"+
    "\1\37\1\0\3\37\1\254\22\37\1\0\1\37\31\0"+
    "\3\37\7\0\3\37\4\0\1\37\1\0\1\255\25\37"+
    "\1\0\1\37\31\0\3\37\7\0\3\37\4\0\1\37"+
    "\1\0\4\37\1\256\21\37\1\0\1\37\31\0\3\37"+
    "\7\0\3\37\4\0\1\37\1\0\1\257\25\37\1\0"+
    "\1\37\31\0\3\37\7\0\3\37\4\0\1\37\1\0"+
    "\14\37\1\260\11\37\1\0\1\37\31\0\3\37\7\0"+
    "\3\37\4\0\1\37\1\0\10\37\1\261\7\37\1\262"+
    "\5\37\1\0\1\37\31\0\3\37\7\0\3\37\4\0"+
    "\1\37\1\0\22\37\1\263\3\37\1\0\1\37\31\0"+
    "\3\37\7\0\3\37\4\0\1\37\1\0\21\37\1\264"+
    "\4\37\1\0\1\37\31\0\3\37\7\0\3\37\4\0"+
    "\1\37\1\0\12\37\1\265\13\37\1\0\1\37\31\0"+
    "\3\37\7\0\3\37\4\0\1\37\1\0\17\37\1\266"+
    "\6\37\1\0\1\37\31\0\3\37\7\0\3\37\4\0"+
    "\1\37\1\0\14\37\1\267\11\37\1\0\1\37\31\0"+
    "\3\37\7\0\3\37\4\0\1\37\1\0\21\37\1\270"+
    "\4\37\1\0\1\37\31\0\3\37\7\0\3\37\4\0"+
    "\1\37\1\0\5\37\1\271\20\37\1\0\1\37\31\0"+
    "\3\37\7\0\3\37\4\0\1\37\1\0\21\37\1\272"+
    "\4\37\1\0\1\37\31\0\3\37\7\0\3\37\4\0"+
    "\1\37\1\0\14\37\1\273\11\37\1\0\1\37\31\0"+
    "\3\37\7\0\3\37\4\0\1\37\1\0\21\37\1\274"+
    "\4\37\1\0\1\37\31\0\3\37\7\0\3\37\4\0"+
    "\1\37\1\0\12\37\1\275\13\37\1\0\1\37\31\0"+
    "\3\37\7\0\3\37\4\0\1\37\1\0\20\37\1\276"+
    "\5\37\1\0\1\37\3\0\2\176\1\0\2\176\1\0"+
    "\2\176\1\131\73\176\2\177\1\0\2\177\1\0\7\177"+
    "\1\131\66\177\26\0\3\37\7\0\3\37\4\0\1\37"+
    "\1\0\21\37\1\277\4\37\1\0\1\37\31\0\3\37"+
    "\7\0\3\37\4\0\1\37\1\0\12\37\1\300\6\37"+
    "\1\301\4\37\1\0\1\37\31\0\3\37\7\0\3\37"+
    "\4\0\1\37\1\0\6\37\1\302\17\37\1\0\1\37"+
    "\31\0\3\37\7\0\3\37\4\0\1\37\1\0\1\303"+
    "\25\37\1\0\1\37\31\0\3\37\7\0\3\37\4\0"+
    "\1\37\1\0\16\37\1\304\7\37\1\0\1\37\31\0"+
    "\3\37\7\0\3\37\4\0\1\37\1\0\22\37\1\305"+
    "\3\37\1\0\1\37\31\0\3\37\7\0\3\37\4\0"+
    "\1\37\1\0\17\37\1\306\6\37\1\0\1\37\31\0"+
    "\3\37\7\0\3\37\4\0\1\37\1\0\10\37\1\307"+
    "\15\37\1\0\1\37\31\0\3\37\7\0\3\37\4\0"+
    "\1\37\1\0\10\37\1\310\15\37\1\0\1\37\3\0"+
    "\2\211\1\0\2\117\1\0\2\211\1\72\33\211\1\213"+
    "\36\211\1\117\2\72\4\0\2\72\1\311\72\72\1\0"+
    "\1\211\1\312\2\117\1\234\1\117\1\312\35\211\1\313"+
    "\36\211\1\117\2\214\1\0\2\126\1\0\2\214\1\72"+
    "\33\214\1\314\36\214\1\126\2\215\1\0\2\130\1\0"+
    "\7\215\1\72\26\215\1\315\36\215\1\130\1\100\1\316"+
    "\2\15\1\243\1\15\1\316\35\100\1\317\36\100\1\15"+
    "\2\217\1\0\2\147\1\0\1\211\1\217\1\72\33\217"+
    "\1\320\36\217\1\147\2\220\1\0\2\176\1\0\2\220"+
    "\1\72\72\220\1\176\2\221\1\0\2\177\1\0\7\221"+
    "\1\72\65\221\1\177\2\222\1\0\2\117\1\0\2\222"+
    "\1\103\33\222\1\224\36\222\1\117\2\103\4\0\2\103"+
    "\1\321\72\103\1\0\1\222\1\322\2\117\1\234\1\117"+
    "\1\322\35\222\1\323\36\222\1\117\2\225\1\0\2\126"+
    "\1\0\2\225\1\103\33\225\1\324\36\225\1\126\2\226"+
    "\1\0\2\130\1\0\7\226\1\103\26\226\1\325\36\226"+
    "\1\130\1\111\1\326\2\15\1\243\1\15\1\326\35\111"+
    "\1\327\36\111\1\15\2\230\1\0\2\147\1\0\1\222"+
    "\1\230\1\103\33\230\1\330\36\230\1\147\2\231\1\0"+
    "\2\176\1\0\2\231\1\103\72\231\1\176\2\232\1\0"+
    "\2\177\1\0\7\232\1\103\65\232\1\177\10\233\1\331"+
    "\33\233\1\332\37\233\1\117\1\234\2\117\1\234\1\117"+
    "\1\234\1\117\1\131\33\117\1\236\40\117\4\234\1\333"+
    "\1\234\1\117\1\235\33\117\1\236\37\117\2\126\4\0"+
    "\75\126\1\0\2\130\4\0\75\130\1\0\1\15\1\243"+
    "\2\15\1\243\1\15\1\243\6\15\1\131\26\15\1\334"+
    "\41\15\1\335\2\243\1\336\7\15\1\131\26\15\1\132"+
    "\37\15\26\0\3\247\101\0\3\247\16\0\1\247\34\0"+
    "\1\147\1\337\2\117\1\234\1\117\1\337\1\147\1\340"+
    "\33\147\1\341\36\147\1\117\26\0\3\37\7\0\3\37"+
    "\4\0\1\37\1\0\10\37\1\342\15\37\1\0\1\37"+
    "\31\0\3\37\7\0\3\37\4\0\1\37\1\0\1\343"+
    "\25\37\1\0\1\37\31\0\3\37\7\0\3\37\4\0"+
    "\1\37\1\0\20\37\1\344\5\37\1\0\1\37\31\0"+
    "\3\37\7\0\3\37\4\0\1\37\1\0\20\37\1\345"+
    "\1\346\4\37\1\0\1\37\31\0\3\37\7\0\3\37"+
    "\4\0\1\37\1\0\5\37\1\347\20\37\1\0\1\37"+
    "\31\0\3\37\7\0\3\37\4\0\1\37\1\0\4\37"+
    "\1\350\21\37\1\0\1\37\31\0\3\37\7\0\3\37"+
    "\4\0\1\37\1\0\13\37\1\351\12\37\1\0\1\37"+
    "\31\0\3\37\7\0\3\37\4\0\1\37\1\0\4\37"+
    "\1\352\21\37\1\0\1\37\31\0\3\37\7\0\3\37"+
    "\4\0\1\37\1\0\20\37\1\353\5\37\1\0\1\37"+
    "\31\0\3\37\7\0\3\37\4\0\1\37\1\0\2\37"+
    "\1\354\23\37\1\0\1\37\31\0\3\37\7\0\3\37"+
    "\4\0\1\37\1\0\2\37\1\355\23\37\1\0\1\37"+
    "\31\0\3\37\7\0\3\37\4\0\1\37\1\0\12\37"+
    "\1\356\13\37\1\0\1\37\31\0\3\37\7\0\3\37"+
    "\4\0\1\37\1\0\20\37\1\357\5\37\1\0\1\37"+
    "\31\0\3\37\7\0\3\37\4\0\1\37\1\0\22\37"+
    "\1\360\3\37\1\0\1\37\31\0\3\37\7\0\3\37"+
    "\4\0\1\37\1\0\5\37\1\361\20\37\1\0\1\37"+
    "\31\0\3\37\7\0\3\37\4\0\1\37\1\0\14\37"+
    "\1\362\11\37\1\0\1\37\31\0\3\37\7\0\3\37"+
    "\4\0\1\37\1\0\21\37\1\363\4\37\1\0\1\37"+
    "\31\0\3\37\7\0\3\37\4\0\1\37\1\0\4\37"+
    "\1\364\21\37\1\0\1\37\31\0\3\37\7\0\3\37"+
    "\4\0\1\37\1\0\4\37\1\365\21\37\1\0\1\37"+
    "\31\0\3\37\7\0\3\37\4\0\1\37\1\0\1\366"+
    "\25\37\1\0\1\37\31\0\3\37\7\0\3\37\4\0"+
    "\1\37\1\0\3\37\1\367\22\37\1\0\1\37\31\0"+
    "\3\37\7\0\3\37\4\0\1\37\1\0\12\37\1\370"+
    "\13\37\1\0\1\37\3\0\2\311\4\233\2\311\1\371"+
    "\33\311\1\372\36\311\1\233\1\211\1\312\2\117\1\234"+
    "\1\117\1\312\1\211\1\72\33\211\1\313\36\211\1\117"+
    "\1\211\1\312\3\234\1\333\1\312\35\211\1\313\36\211"+
    "\1\117\2\214\4\0\75\214\1\0\2\215\4\0\75\215"+
    "\1\0\1\100\1\316\2\15\1\243\1\15\1\316\6\100"+
    "\1\72\26\100\1\373\36\100\1\15\2\100\1\335\2\243"+
    "\1\336\7\100\1\72\26\100\1\216\36\100\1\15\1\217"+
    "\1\374\2\117\1\234\1\117\1\374\35\217\1\375\36\217"+
    "\1\117\2\321\4\233\2\321\1\376\33\321\1\377\36\321"+
    "\1\233\1\222\1\322\2\117\1\234\1\117\1\322\1\222"+
    "\1\103\33\222\1\323\36\222\1\117\1\222\1\322\3\234"+
    "\1\333\1\322\35\222\1\323\36\222\1\117\2\225\4\0"+
    "\75\225\1\0\2\226\4\0\75\226\1\0\1\111\1\326"+
    "\2\15\1\243\1\15\1\326\6\111\1\103\26\111\1\u0100"+
    "\36\111\1\15\2\111\1\335\2\243\1\336\7\111\1\103"+
    "\26\111\1\227\36\111\1\15\1\230\1\u0101\2\117\1\234"+
    "\1\117\1\u0101\35\230\1\u0102\36\230\1\117\10\233\1\u0103"+
    "\1\233\1\0\31\233\1\0\47\233\1\u0104\33\233\1\332"+
    "\37\233\1\117\2\234\1\117\1\234\1\117\1\234\1\117"+
    "\1\131\33\117\1\236\37\117\1\15\4\243\1\u0105\1\243"+
    "\35\15\1\244\37\15\1\0\1\335\1\15\1\0\1\335"+
    "\1\15\1\335\35\0\1\u0106\40\0\1\335\1\243\1\0"+
    "\1\335\1\15\1\335\35\0\1\u0106\37\0\1\147\1\337"+
    "\1\117\1\147\1\337\1\117\1\234\1\147\1\252\33\147"+
    "\1\u0107\40\147\1\337\1\234\2\337\1\333\1\234\1\147"+
    "\1\u0108\33\147\1\u0107\37\147\26\0\3\37\7\0\3\37"+
    "\4\0\1\37\1\0\21\37\1\u0109\4\37\1\0\1\37"+
    "\31\0\3\37\7\0\3\37\4\0\1\37\1\0\11\37"+
    "\1\u010a\14\37\1\0\1\37\31\0\3\37\7\0\3\37"+
    "\4\0\1\37\1\0\20\37\1\u010b\5\37\1\0\1\37"+
    "\31\0\3\37\7\0\3\37\4\0\1\37\1\0\21\37"+
    "\1\u010c\4\37\1\0\1\37\31\0\3\37\7\0\3\37"+
    "\4\0\1\37\1\0\10\37\1\u010d\15\37\1\0\1\37"+
    "\31\0\3\37\7\0\3\37\4\0\1\37\1\0\14\37"+
    "\1\u010e\11\37\1\0\1\37\31\0\3\37\7\0\3\37"+
    "\4\0\1\37\1\0\4\37\1\u010f\21\37\1\0\1\37"+
    "\31\0\3\37\7\0\3\37\4\0\1\37\1\0\7\37"+
    "\1\u0110\16\37\1\0\1\37\31\0\3\37\7\0\3\37"+
    "\4\0\1\37\1\0\17\37\1\u0111\6\37\1\0\1\37"+
    "\31\0\3\37\7\0\3\37\4\0\1\37\1\0\1\u0112"+
    "\25\37\1\0\1\37\31\0\3\37\7\0\3\37\4\0"+
    "\1\37\1\0\10\37\1\u0113\15\37\1\0\1\37\31\0"+
    "\3\37\7\0\3\37\4\0\1\37\1\0\17\37\1\u0114"+
    "\6\37\1\0\1\37\31\0\3\37\7\0\3\37\4\0"+
    "\1\37\1\0\17\37\1\u0115\6\37\1\0\1\37\31\0"+
    "\3\37\7\0\3\37\4\0\1\37\1\0\4\37\1\u0116"+
    "\21\37\1\0\1\37\3\0\2\311\4\233\2\311\1\u0117"+
    "\1\311\1\72\31\311\1\72\36\311\1\233\2\311\4\233"+
    "\36\311\1\372\36\311\1\233\1\100\1\316\3\243\1\u0105"+
    "\1\316\35\100\1\317\36\100\1\15\1\217\1\374\1\117"+
    "\1\147\1\337\1\117\1\312\1\217\1\72\33\217\1\u0118"+
    "\36\217\1\147\1\217\1\374\1\234\2\337\1\333\1\312"+
    "\1\217\1\211\33\217\1\u0118\36\217\1\147\2\321\4\233"+
    "\2\321\1\u0119\1\321\1\103\31\321\1\103\36\321\1\233"+
    "\2\321\4\233\36\321\1\377\36\321\1\233\1\111\1\326"+
    "\3\243\1\u0105\1\326\35\111\1\327\36\111\1\15\1\230"+
    "\1\u0101\1\117\1\147\1\337\1\117\1\322\1\230\1\103"+
    "\33\230\1\u011a\36\230\1\147\1\230\1\u0101\1\234\2\337"+
    "\1\333\1\322\1\230\1\222\33\230\1\u011a\36\230\1\147"+
    "\10\233\1\131\1\233\1\0\31\233\1\0\47\233\1\u011b"+
    "\33\233\1\332\37\233\1\15\2\243\1\15\1\243\1\15"+
    "\1\243\6\15\1\131\26\15\1\334\37\15\2\0\3\335"+
    "\1\336\76\0\1\147\1\337\3\234\1\333\1\337\1\147"+
    "\1\340\33\147\1\341\36\147\1\117\26\0\3\37\7\0"+
    "\3\37\4\0\1\37\1\0\16\37\1\u011c\7\37\1\0"+
    "\1\37\31\0\3\37\7\0\3\37\4\0\1\u011d\1\0"+
    "\26\37\1\0\1\37\31\0\3\37\7\0\3\37\4\0"+
    "\1\37\1\0\14\37\1\u011e\11\37\1\0\1\37\31\0"+
    "\3\37\7\0\3\37\4\0\1\37\1\0\3\37\1\u011f"+
    "\22\37\1\0\1\37\31\0\3\37\7\0\3\37\4\0"+
    "\1\37\1\0\14\37\1\u0120\11\37\1\0\1\37\31\0"+
    "\3\37\7\0\3\37\4\0\1\37\1\0\12\37\1\u0121"+
    "\13\37\1\0\1\37\31\0\3\37\7\0\3\37\4\0"+
    "\1\37\1\0\2\37\1\u0122\23\37\1\0\1\37\31\0"+
    "\3\37\7\0\3\37\4\0\1\37\1\0\6\37\1\u0123"+
    "\17\37\1\0\1\37\3\0\2\311\4\233\2\311\1\72"+
    "\1\311\1\72\31\311\1\72\36\311\1\233\1\217\1\374"+
    "\3\234\1\333\1\374\35\217\1\375\36\217\1\117\2\321"+
    "\4\233\2\321\1\103\1\321\1\103\31\321\1\103\36\321"+
    "\1\233\1\230\1\u0101\3\234\1\333\1\u0101\35\230\1\u0102"+
    "\36\230\1\117\10\233\1\u0124\1\233\1\0\31\233\1\0"+
    "\37\233\26\0\3\37\7\0\3\37\4\0\1\37\1\0"+
    "\15\37\1\u0125\10\37\1\0\1\37\31\0\3\37\7\0"+
    "\3\37\4\0\1\37\1\0\14\37\1\u0126\11\37\1\0"+
    "\1\37\31\0\3\37\7\0\3\37\4\0\1\37\1\0"+
    "\22\37\1\u0127\3\37\1\0\1\37\31\0\3\37\7\0"+
    "\3\37\4\0\1\37\1\0\20\37\1\u0128\5\37\1\0"+
    "\1\37\31\0\3\37\7\0\3\37\4\0\1\37\1\0"+
    "\10\37\1\u0129\15\37\1\0\1\37\31\0\3\37\7\0"+
    "\3\37\4\0\1\37\1\0\1\u012a\25\37\1\0\1\37"+
    "\31\0\3\37\7\0\3\37\4\0\1\37\1\0\4\37"+
    "\1\u012b\21\37\1\0\1\37\31\0\3\37\7\0\3\37"+
    "\4\0\1\37\1\0\14\37\1\u012c\11\37\1\0\1\37"+
    "\31\0\3\37\7\0\3\37\4\0\1\37\1\0\13\37"+
    "\1\u012d\12\37\1\0\1\37\31\0\3\37\7\0\3\37"+
    "\4\0\1\37\1\0\21\37\1\u012e\4\37\1\0\1\37"+
    "\31\0\3\37\7\0\3\37\4\0\1\37\1\0\4\37"+
    "\1\u012f\21\37\1\0\1\37\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[15708];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\7\1\2\11\2\1\1\11"+
    "\6\1\1\11\3\1\1\11\2\1\3\11\2\1\1\11"+
    "\20\1\1\11\1\1\2\11\22\1\3\11\1\0\1\1"+
    "\2\0\1\1\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\1\3\11\2\1\3\0\1\11\2\1\1\0"+
    "\63\1\2\0\1\1\1\0\2\11\2\0\2\1\1\11"+
    "\1\0\3\1\1\11\1\0\55\1\7\0\1\1\1\0"+
    "\41\1\2\0\1\1\2\0\23\1\1\0\24\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[303];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    String oppening = "";
    int lastState = YYINITIAL;
    boolean lineEnded = false;
    int indent = 0;
    Stack<Integer> indentSizes = new Stack<>();
    boolean eofFinished = false;

    boolean newLineProcessed = false;
    // For signals and such, where Indents/NewLines do not matter
    boolean ignoreIndent = false;
    int ignored = 0;
    Stack<Integer> ignoreLambda = new Stack<>();
    // Tracks the bracket depth (value of `ignored`) when each lambda was encountered
    Stack<Integer> ignoreLambdaLevel = new Stack<>();
    Pattern nextNonCommentIndentPattern = Pattern.compile("\\n([ |\\t]*)[^#\\s]");

    public IElementType dedentRoot(IElementType type) {
        newLineProcessed = false;
        lineEnded = false;
        if (isIgnored() || yycolumn > 0 || indent <= 0 || indentSizes.empty()) {
            return type;
        }

        dedent();
        yypushback(yylength());

        return GdTypes.DEDENT;
    }

    public boolean dedentSpaces() {
        newLineProcessed = false;
        if (indent <= 0 || indentSizes.empty()) { // For EOF rule
            return false;
        }

        dedent();
        yypushback(yylength());

        return true;
    }

    private int nextNonCommentIndent() {
        Matcher matcher = nextNonCommentIndentPattern.matcher(zzBuffer.subSequence(Math.min(zzBuffer.length(), zzCurrentPos+yylength()), zzBuffer.length()));
        if (matcher.find()) {
            return matcher.group(1).length();
        }

        return -1;
    }

    private IElementType dedentComment(IElementType type) {
        int nextIndent = nextNonCommentIndent();
        if (nextIndent < 0 || isIgnored() || indent <= 0 || indentSizes.empty() || indent <= nextIndent || !newLineProcessed) {
            return type;
        }

        dedent();
        yypushback(yylength());

        return GdTypes.DEDENT;
    }

    private void dedent() {
        indent = Math.max(0, indent - indentSizes.pop());
    }

    private boolean isIgnored() {
        if (ignored <= 0) return false;
        if (!ignoreLambda.isEmpty()) {
            // If there is an activated lambda at the current bracket depth, indentation is ACTIVE.
            for (int i = ignoreLambda.size() - 1; i >= 0; i--) {
                int lvl = ignoreLambdaLevel.get(i);
                if (lvl == ignored) {
                    int at = ignoreLambda.get(i);
                    // at >= 0 means ':' started a block for this lambda → re-activate indentation
                    return at < 0; // still ignored only until ':' activates the lambda
                }
            }
        }
        // No activated lambda for this depth → ignore indentation while inside brackets.
        return true;
    }

    private void ignoredMinus() {
        // Decrease bracket depth and remove any lambda contexts that belonged to deeper brackets.
        ignored = Math.max(0, ignored - 1);
        while (!ignoreLambdaLevel.isEmpty() && ignoreLambdaLevel.peek() > ignored) {
            ignoreLambdaLevel.pop();
            ignoreLambda.pop();
        }
    }

    private void markLambda() {
        if (ignored > 0) {
            // Defer activation until ':' is seen on this lambda line; store bracket depth now.
            ignoreLambda.push(-1); // -1 means not yet activated by ':'
            ignoreLambdaLevel.push(ignored);
        }
    }

    private boolean colonStartsBlock() {
        // Look ahead from current position to the end of line. If only spaces/tabs and optional comment
        // remain before a newline or EOF, treat this ':' as starting a block suite.
        int start = Math.min(zzBuffer.length(), zzCurrentPos + yylength());
        for (int i = start; i < zzBuffer.length(); i++) {
            char c = zzBuffer.charAt(i);
            if (c == '\r' || c == '\n') return true; // newline reached with nothing significant after ':'
            if (c == '#') {
                // comment until EOL — still a block
                // skip until newline/EOF
                while (i < zzBuffer.length()) {
                    char d = zzBuffer.charAt(i);
                    if (d == '\r' || d == '\n') return true;
                    i++;
                }
                return true;
            }
            if (c != ' ' && c != '\t') return false; // some token follows on same line → inline suite
        }
        // Reached EOF without newline and with only whitespace/comment → block
        return true;
    }

    private int currentLineIndent() {
        // Count spaces/tabs from the previous newline (or BOF) up to first non-space
        int i = Math.min(zzBuffer.length(), zzCurrentPos);
        // Move i to the start of current token
        int start = i;
        // Go back to previous newline
        while (start > 0) {
            char c = zzBuffer.charAt(start - 1);
            if (c == '\n' || c == '\r') break;
            start--;
        }
        int indentCount = 0;
        while (start + indentCount < zzBuffer.length()) {
            char c = zzBuffer.charAt(start + indentCount);
            if (c == ' ' || c == '\t') {
                indentCount++;
            } else {
                break;
            }
        }
        return indentCount;
    }

    private void activateLambdaAfterColon() {
        if (!ignoreLambda.isEmpty() && colonStartsBlock()) {
            int i = ignoreLambda.size() - 1;
            if (ignoreLambdaLevel.get(i) == ignored && ignoreLambda.get(i) < 0) {
                // Activate lambda indentation handling at this bracket depth because ':' starts a block
                // Use the actual visual indent of the current line (inside parens indentation is ignored by lexer state)
                ignoreLambda.set(i, currentLineIndent());
            }
        }
    }

    private boolean hasActiveLambdaAtCurrentDepth() {
        if (ignoreLambda.isEmpty()) return false;
        int i = ignoreLambda.size() - 1;
        return ignoreLambdaLevel.get(i) == ignored && ignoreLambda.get(i) >= 0;
    }

    private IElementType closeBracket(IElementType tokenType) {
        // Before decreasing ignored depth, check for active lambda block at this level
        if (hasActiveLambdaAtCurrentDepth()) {
            int i = ignoreLambda.size() - 1;
            int lambdaDepth = ignoreLambdaLevel.get(i);
            // For outermost call-arg lambdas (depth==1), defer dedent until after the bracket
            if (lambdaDepth > 0) {
                int targetIndent = Math.max(0, ignoreLambda.get(i)); // exact indentation recorded at ':'
                // Emit one DEDENT per advance until we unwind back to targetIndent.
                if (!indentSizes.empty() && indent > targetIndent) {
                    dedent();
                    yypushback(yylength());
                    return GdTypes.DEDENT;
                }
            }
        }

        ignoredMinus(); // reduce paren depth, clear deeper lambdas
        return dedentRoot(tokenType);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  GdLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                // Emit any pending DEDENTs before adding a synthetic NEW_LINE at EOF
    if (!indentSizes.empty()) {
        indentSizes.pop();
        yypushback(yylength());
        return GdTypes.DEDENT;
    }

    if (yycolumn > 0 && !eofFinished && !lineEnded && !isIgnored()) {
        eofFinished = true;
        return GdTypes.NEW_LINE;
    }

    return null;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 90: break;
          case 2:
            { if (yycolumn == 0 && !ignoreIndent) {
            int spaces = yytext().length();
            if (spaces > indent) {
                if (isIgnored()) {
                    return TokenType.WHITE_SPACE;
                }

                indentSizes.push(spaces - indent);
                indent = spaces;

                return GdTypes.INDENT;
            } else if (indent > spaces) {
                dedentSpaces();
                return GdTypes.DEDENT;
            }
        }
        ignoreIndent = false;

        return TokenType.WHITE_SPACE;
            }
          // fall through
          case 91: break;
          case 3:
            { int nextIndentNl = nextNonCommentIndent();
        boolean willDedent = nextIndentNl >= 0 && !isIgnored() && !indentSizes.empty() && indent > nextIndentNl;
        if (yycolumn == 0) {
            return TokenType.WHITE_SPACE;
        } else if (isIgnored()) {
            return TokenType.WHITE_SPACE;
        }

        if (newLineProcessed) {
            return TokenType.WHITE_SPACE;
        }

        newLineProcessed = true;
        if (willDedent) {
            lastState = YYINITIAL;
            yybegin(PENDING_DEDENT);
        }
        return GdTypes.NEW_LINE;
            }
          // fall through
          case 92: break;
          case 4:
            { return dedentRoot(GdTypes.NEGATE);
            }
          // fall through
          case 93: break;
          case 5:
            { return dedentComment(GdTypes.COMMENT);
            }
          // fall through
          case 94: break;
          case 6:
            { return dedentRoot(GdTypes.DOLLAR);
            }
          // fall through
          case 95: break;
          case 7:
            { return dedentRoot(GdTypes.MOD);
            }
          // fall through
          case 96: break;
          case 8:
            { return dedentRoot(GdTypes.AND);
            }
          // fall through
          case 97: break;
          case 9:
            { return dedentRoot(GdTypes.STRING);
            }
          // fall through
          case 98: break;
          case 10:
            { ignored++; return dedentRoot(GdTypes.LRBR);
            }
          // fall through
          case 99: break;
          case 11:
            { return closeBracket(GdTypes.RRBR);
            }
          // fall through
          case 100: break;
          case 12:
            { return dedentRoot(GdTypes.MUL);
            }
          // fall through
          case 101: break;
          case 13:
            { return dedentRoot(GdTypes.PLUS);
            }
          // fall through
          case 102: break;
          case 14:
            { return dedentRoot(GdTypes.COMMA);
            }
          // fall through
          case 103: break;
          case 15:
            { return dedentRoot(GdTypes.MINUS);
            }
          // fall through
          case 104: break;
          case 16:
            { return dedentRoot(GdTypes.DOT);
            }
          // fall through
          case 105: break;
          case 17:
            { return dedentRoot(GdTypes.DIV);
            }
          // fall through
          case 106: break;
          case 18:
            { return dedentRoot(GdTypes.NUMBER);
            }
          // fall through
          case 107: break;
          case 19:
            { activateLambdaAfterColon(); return dedentRoot(GdTypes.COLON);
            }
          // fall through
          case 108: break;
          case 20:
            { newLineProcessed = true; return GdTypes.SEMICON;
            }
          // fall through
          case 109: break;
          case 21:
            { return GdTypes.TEST_OPERATOR;
            }
          // fall through
          case 110: break;
          case 22:
            { return dedentRoot(GdTypes.EQ);
            }
          // fall through
          case 111: break;
          case 23:
            { return dedentRoot(GdTypes.QUESTION_MARK);
            }
          // fall through
          case 112: break;
          case 24:
            { return dedentRoot(GdTypes.ANNOTATOR);
            }
          // fall through
          case 113: break;
          case 25:
            { return dedentRoot(GdTypes.IDENTIFIER);
            }
          // fall through
          case 114: break;
          case 26:
            { ignored++; return dedentRoot(GdTypes.LSBR);
            }
          // fall through
          case 115: break;
          case 27:
            { newLineProcessed = true; ignoreIndent = true; return GdTypes.BACKSLASH;
            }
          // fall through
          case 116: break;
          case 28:
            { return closeBracket(GdTypes.RSBR);
            }
          // fall through
          case 117: break;
          case 29:
            { return dedentRoot(GdTypes.XOR);
            }
          // fall through
          case 118: break;
          case 30:
            { return dedentRoot(GdTypes.UNDER);
            }
          // fall through
          case 119: break;
          case 31:
            { return dedentRoot(GdTypes.BACKTICK);
            }
          // fall through
          case 120: break;
          case 32:
            { ignored++; return dedentRoot(GdTypes.LCBR);
            }
          // fall through
          case 121: break;
          case 33:
            { return dedentRoot(GdTypes.OR);
            }
          // fall through
          case 122: break;
          case 34:
            { return closeBracket(GdTypes.RCBR);
            }
          // fall through
          case 123: break;
          case 35:
            { return dedentRoot(GdTypes.NOT);
            }
          // fall through
          case 124: break;
          case 36:
            { yybegin(lastState);
        yypushback(yylength());

        return GdTypes.INDENT;
            }
          // fall through
          case 125: break;
          case 37:
            { yybegin(lastState);
        yypushback(yylength());
        return GdTypes.DEDENT;
            }
          // fall through
          case 126: break;
          case 38:
            { if (yycolumn > 0) { yypushback(1); } return TokenType.WHITE_SPACE;
            }
          // fall through
          case 127: break;
          case 39:
            { yypushback(1);
        if (yycolumn == 0) {
            newLineProcessed = true;
        }

        return TokenType.WHITE_SPACE;
            }
          // fall through
          case 128: break;
          case 40:
            { if (yytext().toString().startsWith("%\"")) {
              String preceeding = zzBufferL.toString().substring(Math.max(0, zzCurrentPos - 100), zzCurrentPos).trim();
              if (preceeding.length() > 1 && preceeding.charAt(preceeding.length() - 1) == '"') {
                  yypushback(yylength() - 1);
                  return dedentRoot(GdTypes.MOD);
              }
          }

          return dedentRoot(GdTypes.NODE_PATH_LEX);
            }
          // fall through
          case 129: break;
          case 41:
            { return GdTypes.ASSIGN;
            }
          // fall through
          case 130: break;
          case 42:
            { return dedentRoot(GdTypes.ANDAND);
            }
          // fall through
          case 131: break;
          case 43:
            { return dedentRoot(GdTypes.POWER);
            }
          // fall through
          case 132: break;
          case 44:
            { return dedentRoot(GdTypes.PPLUS);
            }
          // fall through
          case 133: break;
          case 45:
            { return dedentRoot(GdTypes.MMINUS);
            }
          // fall through
          case 134: break;
          case 46:
            { return dedentRoot(GdTypes.RET);
            }
          // fall through
          case 135: break;
          case 47:
            { return dedentRoot(GdTypes.DOTDOT);
            }
          // fall through
          case 136: break;
          case 48:
            { return dedentRoot(GdTypes.CEQ);
            }
          // fall through
          case 137: break;
          case 49:
            { return dedentRoot(GdTypes.LBSHIFT);
            }
          // fall through
          case 138: break;
          case 50:
            { return dedentRoot(GdTypes.RBSHIFT);
            }
          // fall through
          case 139: break;
          case 51:
            { return dedentRoot(GdTypes.AS);
            }
          // fall through
          case 140: break;
          case 52:
            { markLambda(); return dedentRoot(GdTypes.IF);
            }
          // fall through
          case 141: break;
          case 53:
            { return dedentRoot(GdTypes.IN);
            }
          // fall through
          case 142: break;
          case 54:
            { return dedentRoot(GdTypes.IS);
            }
          // fall through
          case 143: break;
          case 55:
            { return dedentRoot(GdTypes.OROR);
            }
          // fall through
          case 144: break;
          case 56:
            { return dedentRoot(GdTypes.STRING_NAME);
            }
          // fall through
          case 145: break;
          case 57:
            { return dedentRoot(GdTypes.DOTDOTDOT);
            }
          // fall through
          case 146: break;
          case 58:
            { return dedentRoot(GdTypes.NODE_PATH_LIT);
            }
          // fall through
          case 147: break;
          case 59:
            { markLambda(); return dedentRoot(GdTypes.FOR);
            }
          // fall through
          case 148: break;
          case 60:
            { return dedentRoot(GdTypes.GET);
            }
          // fall through
          case 149: break;
          case 61:
            { return dedentRoot(GdTypes.INF);
            }
          // fall through
          case 150: break;
          case 62:
            { return dedentRoot(GdTypes.NAN);
            }
          // fall through
          case 151: break;
          case 63:
            { return dedentRoot(GdTypes.SET);
            }
          // fall through
          case 152: break;
          case 64:
            { return dedentRoot(GdTypes.VAR);
            }
          // fall through
          case 153: break;
          case 65:
            { markLambda(); return dedentRoot(GdTypes.ELIF);
            }
          // fall through
          case 154: break;
          case 66:
            { markLambda(); return dedentRoot(GdTypes.ELSE);
            }
          // fall through
          case 155: break;
          case 67:
            { return dedentRoot(GdTypes.ENUM);
            }
          // fall through
          case 156: break;
          case 68:
            { markLambda(); return dedentRoot(GdTypes.FUNC);
            }
          // fall through
          case 157: break;
          case 69:
            { return dedentRoot(GdTypes.NULL);
            }
          // fall through
          case 158: break;
          case 70:
            { return dedentRoot(GdTypes.PASS);
            }
          // fall through
          case 159: break;
          case 71:
            { return dedentRoot(GdTypes.SELF);
            }
          // fall through
          case 160: break;
          case 72:
            { return dedentRoot(GdTypes.TRUE);
            }
          // fall through
          case 161: break;
          case 73:
            { return dedentRoot(GdTypes.VOID);
            }
          // fall through
          case 162: break;
          case 74:
            { return dedentRoot(GdTypes.AWAIT);
            }
          // fall through
          case 163: break;
          case 75:
            { return dedentRoot(GdTypes.BREAK);
            }
          // fall through
          case 164: break;
          case 76:
            { return dedentRoot(GdTypes.CLASS);
            }
          // fall through
          case 165: break;
          case 77:
            { return dedentRoot(GdTypes.CONST);
            }
          // fall through
          case 166: break;
          case 78:
            { return dedentRoot(GdTypes.FALSE);
            }
          // fall through
          case 167: break;
          case 79:
            { markLambda(); return dedentRoot(GdTypes.MATCH);
            }
          // fall through
          case 168: break;
          case 80:
            { return dedentRoot(GdTypes.SUPER);
            }
          // fall through
          case 169: break;
          case 81:
            { markLambda(); return dedentRoot(GdTypes.WHILE);
            }
          // fall through
          case 170: break;
          case 82:
            { return dedentRoot(GdTypes.RETURN);
            }
          // fall through
          case 171: break;
          case 83:
            { return dedentRoot(GdTypes.SIGNAL);
            }
          // fall through
          case 172: break;
          case 84:
            { return dedentRoot(GdTypes.STATIC);
            }
          // fall through
          case 173: break;
          case 85:
            { return dedentRoot(GdTypes.VARARG);
            }
          // fall through
          case 174: break;
          case 86:
            { return dedentRoot(GdTypes.EXTENDS);
            }
          // fall through
          case 175: break;
          case 87:
            { return dedentRoot(GdTypes.CONTINUE);
            }
          // fall through
          case 176: break;
          case 88:
            { return dedentRoot(GdTypes.BREAKPOINT);
            }
          // fall through
          case 177: break;
          case 89:
            { return dedentRoot(GdTypes.CLASS_NAME);
            }
          // fall through
          case 178: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
